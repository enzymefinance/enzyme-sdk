// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file enzyme/enzyme/v1alpha/enzyme.proto (package enzyme.enzyme.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

// This package contains all endpoints of the Enzyme API 

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Currency, Deployment, Release, Resolution } from "./enums_pb.js";
import { AssetItem } from "./asset_item_pb.js";
import { TimeWindow } from "./time_window_pb.js";
import { DepositorTimeSeriesItem } from "./depositor_time_series_item_pb.js";
import { ManagerTimeSeriesItem } from "./manager_time_series_item_pb.js";
import { NetworkTimeSeriesItem } from "./network_time_series_item_pb.js";
import { FeeConfiguration } from "./fee_configuration_pb.js";
import { PolicyConfiguration } from "./policy_configuration_pb.js";
import { DepositorItem } from "./depositor_item_pb.js";
import { VaultListItem } from "./vault_list_item_pb.js";
import { PortfolioAssetItem } from "./portfolio_asset_item_pb.js";
import { ExternalPositionItem } from "./external_position_item_pb.js";
import { VaultTimeSeriesItem } from "./vault_time_series_item_pb.js";

/**
 * GetAssetListRequest contains the input parameters for the GetAssetList endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetAssetListRequest
 */
export class GetAssetListRequest extends Message<GetAssetListRequest> {
  /**
   * Request the asset list for a specific deployment
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 2;
   */
  currency = Currency.UNSPECIFIED;

  constructor(data?: PartialMessage<GetAssetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetAssetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAssetListRequest {
    return new GetAssetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAssetListRequest {
    return new GetAssetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAssetListRequest {
    return new GetAssetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAssetListRequest | PlainMessage<GetAssetListRequest> | undefined, b: GetAssetListRequest | PlainMessage<GetAssetListRequest> | undefined): boolean {
    return proto3.util.equals(GetAssetListRequest, a, b);
  }
}

/**
 * GetAssetListResponse contains the output parameters for the GetAssetList endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetAssetListResponse
 */
export class GetAssetListResponse extends Message<GetAssetListResponse> {
  /**
   * Number of assets
   *
   * @generated from field: uint32 number_of_assets = 1;
   */
  numberOfAssets = 0;

  /**
   * List of assets with details on each asset
   *
   * @generated from field: repeated enzyme.enzyme.v1alpha.AssetItem assets = 2;
   */
  assets: AssetItem[] = [];

  constructor(data?: PartialMessage<GetAssetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetAssetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number_of_assets", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "assets", kind: "message", T: AssetItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAssetListResponse {
    return new GetAssetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAssetListResponse {
    return new GetAssetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAssetListResponse {
    return new GetAssetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAssetListResponse | PlainMessage<GetAssetListResponse> | undefined, b: GetAssetListResponse | PlainMessage<GetAssetListResponse> | undefined): boolean {
    return proto3.util.equals(GetAssetListResponse, a, b);
  }
}

/**
 * GetDepositorTimeSeriesRequest contains the input parameters for the GetDepositorTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetDepositorTimeSeriesRequest
 */
export class GetDepositorTimeSeriesRequest extends Message<GetDepositorTimeSeriesRequest> {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The addresses of the depositors
   *
   * @generated from field: repeated string depositor_addresses = 2;
   */
  depositorAddresses: string[] = [];

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 3;
   */
  currency = Currency.UNSPECIFIED;

  /**
   * The time range (from/to) of the time series
   *
   * @generated from field: enzyme.enzyme.v1alpha.TimeWindow range = 4;
   */
  range?: TimeWindow;

  /**
   * The time resolution of the time series
   *
   * @generated from field: enzyme.enzyme.v1alpha.Resolution resolution = 5;
   */
  resolution = Resolution.UNSPECIFIED;

  constructor(data?: PartialMessage<GetDepositorTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetDepositorTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "depositor_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
    { no: 4, name: "range", kind: "message", T: TimeWindow },
    { no: 5, name: "resolution", kind: "enum", T: proto3.getEnumType(Resolution) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDepositorTimeSeriesRequest {
    return new GetDepositorTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDepositorTimeSeriesRequest {
    return new GetDepositorTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDepositorTimeSeriesRequest {
    return new GetDepositorTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDepositorTimeSeriesRequest | PlainMessage<GetDepositorTimeSeriesRequest> | undefined, b: GetDepositorTimeSeriesRequest | PlainMessage<GetDepositorTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(GetDepositorTimeSeriesRequest, a, b);
  }
}

/**
 * GetDepositorTimeSeriesResponse contains the output parameters for the GetDepositorTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetDepositorTimeSeriesResponse
 */
export class GetDepositorTimeSeriesResponse extends Message<GetDepositorTimeSeriesResponse> {
  /**
   * The time series data for the depositor
   *
   * @generated from field: repeated enzyme.enzyme.v1alpha.DepositorTimeSeriesItem items = 1;
   */
  items: DepositorTimeSeriesItem[] = [];

  constructor(data?: PartialMessage<GetDepositorTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetDepositorTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: DepositorTimeSeriesItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDepositorTimeSeriesResponse {
    return new GetDepositorTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDepositorTimeSeriesResponse {
    return new GetDepositorTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDepositorTimeSeriesResponse {
    return new GetDepositorTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDepositorTimeSeriesResponse | PlainMessage<GetDepositorTimeSeriesResponse> | undefined, b: GetDepositorTimeSeriesResponse | PlainMessage<GetDepositorTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(GetDepositorTimeSeriesResponse, a, b);
  }
}

/**
 * GetManagerTimeSeriesRequest contains the input parameters for the GetManagerTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetManagerTimeSeriesRequest
 */
export class GetManagerTimeSeriesRequest extends Message<GetManagerTimeSeriesRequest> {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The addresses of the vaults
   *
   * @generated from field: repeated string vault_addresses = 2;
   */
  vaultAddresses: string[] = [];

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 3;
   */
  currency = Currency.UNSPECIFIED;

  /**
   * The time range (from/to) of the time series
   *
   * @generated from field: enzyme.enzyme.v1alpha.TimeWindow range = 4;
   */
  range?: TimeWindow;

  /**
   * The time resolution of the time series
   *
   * @generated from field: enzyme.enzyme.v1alpha.Resolution resolution = 5;
   */
  resolution = Resolution.UNSPECIFIED;

  constructor(data?: PartialMessage<GetManagerTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetManagerTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "vault_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
    { no: 4, name: "range", kind: "message", T: TimeWindow },
    { no: 5, name: "resolution", kind: "enum", T: proto3.getEnumType(Resolution) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetManagerTimeSeriesRequest {
    return new GetManagerTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetManagerTimeSeriesRequest {
    return new GetManagerTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetManagerTimeSeriesRequest {
    return new GetManagerTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetManagerTimeSeriesRequest | PlainMessage<GetManagerTimeSeriesRequest> | undefined, b: GetManagerTimeSeriesRequest | PlainMessage<GetManagerTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(GetManagerTimeSeriesRequest, a, b);
  }
}

/**
 * GetManagerTimeSeriesResponse contains the output parameters for the GetManagerTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetManagerTimeSeriesResponse
 */
export class GetManagerTimeSeriesResponse extends Message<GetManagerTimeSeriesResponse> {
  /**
   * The time series data for the manager
   *
   * @generated from field: repeated enzyme.enzyme.v1alpha.ManagerTimeSeriesItem items = 1;
   */
  items: ManagerTimeSeriesItem[] = [];

  constructor(data?: PartialMessage<GetManagerTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetManagerTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: ManagerTimeSeriesItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetManagerTimeSeriesResponse {
    return new GetManagerTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetManagerTimeSeriesResponse {
    return new GetManagerTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetManagerTimeSeriesResponse {
    return new GetManagerTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetManagerTimeSeriesResponse | PlainMessage<GetManagerTimeSeriesResponse> | undefined, b: GetManagerTimeSeriesResponse | PlainMessage<GetManagerTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(GetManagerTimeSeriesResponse, a, b);
  }
}

/**
 * GetNetworkFeeStatisticsRequest contains the input parameters for the GetNetworkFeeStatistics endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetNetworkFeeStatisticsRequest
 */
export class GetNetworkFeeStatisticsRequest extends Message<GetNetworkFeeStatisticsRequest> {
  constructor(data?: PartialMessage<GetNetworkFeeStatisticsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetNetworkFeeStatisticsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNetworkFeeStatisticsRequest {
    return new GetNetworkFeeStatisticsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNetworkFeeStatisticsRequest {
    return new GetNetworkFeeStatisticsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNetworkFeeStatisticsRequest {
    return new GetNetworkFeeStatisticsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNetworkFeeStatisticsRequest | PlainMessage<GetNetworkFeeStatisticsRequest> | undefined, b: GetNetworkFeeStatisticsRequest | PlainMessage<GetNetworkFeeStatisticsRequest> | undefined): boolean {
    return proto3.util.equals(GetNetworkFeeStatisticsRequest, a, b);
  }
}

/**
 * GetNetworkFeeStatisticsResponse contains the output parameters for the GetNetworkFeeStatistics endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetNetworkFeeStatisticsResponse
 */
export class GetNetworkFeeStatisticsResponse extends Message<GetNetworkFeeStatisticsResponse> {
  /**
   * Number of MLN burned to date
   *
   * @generated from field: float mln_burned_to_date = 1;
   */
  mlnBurnedToDate = 0;

  /**
   * Network fees collected to date
   *
   * @generated from field: float network_fee_to_date = 2;
   */
  networkFeeToDate = 0;

  /**
   * Network fees annualized
   *
   * @generated from field: float network_fee_annualized = 3;
   */
  networkFeeAnnualized = 0;

  constructor(data?: PartialMessage<GetNetworkFeeStatisticsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetNetworkFeeStatisticsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mln_burned_to_date", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "network_fee_to_date", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "network_fee_annualized", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNetworkFeeStatisticsResponse {
    return new GetNetworkFeeStatisticsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNetworkFeeStatisticsResponse {
    return new GetNetworkFeeStatisticsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNetworkFeeStatisticsResponse {
    return new GetNetworkFeeStatisticsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNetworkFeeStatisticsResponse | PlainMessage<GetNetworkFeeStatisticsResponse> | undefined, b: GetNetworkFeeStatisticsResponse | PlainMessage<GetNetworkFeeStatisticsResponse> | undefined): boolean {
    return proto3.util.equals(GetNetworkFeeStatisticsResponse, a, b);
  }
}

/**
 * GetNetworkTimeSeriesRequest contains the input parameters for the GetNetworkTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetNetworkTimeSeriesRequest
 */
export class GetNetworkTimeSeriesRequest extends Message<GetNetworkTimeSeriesRequest> {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 2;
   */
  currency = Currency.UNSPECIFIED;

  /**
   * The time range (from/to) of the time series
   *
   * @generated from field: enzyme.enzyme.v1alpha.TimeWindow range = 3;
   */
  range?: TimeWindow;

  /**
   * The time resolution of the time series
   *
   * @generated from field: enzyme.enzyme.v1alpha.Resolution resolution = 4;
   */
  resolution = Resolution.UNSPECIFIED;

  constructor(data?: PartialMessage<GetNetworkTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetNetworkTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
    { no: 3, name: "range", kind: "message", T: TimeWindow },
    { no: 4, name: "resolution", kind: "enum", T: proto3.getEnumType(Resolution) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNetworkTimeSeriesRequest {
    return new GetNetworkTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNetworkTimeSeriesRequest {
    return new GetNetworkTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNetworkTimeSeriesRequest {
    return new GetNetworkTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNetworkTimeSeriesRequest | PlainMessage<GetNetworkTimeSeriesRequest> | undefined, b: GetNetworkTimeSeriesRequest | PlainMessage<GetNetworkTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(GetNetworkTimeSeriesRequest, a, b);
  }
}

/**
 * GetNetworkTimeSeriesResponse contains the output parameters for the GetNetworkTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetNetworkTimeSeriesResponse
 */
export class GetNetworkTimeSeriesResponse extends Message<GetNetworkTimeSeriesResponse> {
  /**
   * The time series data for the network
   *
   * @generated from field: repeated enzyme.enzyme.v1alpha.NetworkTimeSeriesItem items = 1;
   */
  items: NetworkTimeSeriesItem[] = [];

  constructor(data?: PartialMessage<GetNetworkTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetNetworkTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: NetworkTimeSeriesItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNetworkTimeSeriesResponse {
    return new GetNetworkTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNetworkTimeSeriesResponse {
    return new GetNetworkTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNetworkTimeSeriesResponse {
    return new GetNetworkTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNetworkTimeSeriesResponse | PlainMessage<GetNetworkTimeSeriesResponse> | undefined, b: GetNetworkTimeSeriesResponse | PlainMessage<GetNetworkTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(GetNetworkTimeSeriesResponse, a, b);
  }
}

/**
 * GetVaultConfigurationRequest contains the input parameters for the GetVaultConfiguration endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultConfigurationRequest
 */
export class GetVaultConfigurationRequest extends Message<GetVaultConfigurationRequest> {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 3;
   */
  currency = Currency.UNSPECIFIED;

  constructor(data?: PartialMessage<GetVaultConfigurationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultConfigurationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultConfigurationRequest {
    return new GetVaultConfigurationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultConfigurationRequest {
    return new GetVaultConfigurationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultConfigurationRequest {
    return new GetVaultConfigurationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultConfigurationRequest | PlainMessage<GetVaultConfigurationRequest> | undefined, b: GetVaultConfigurationRequest | PlainMessage<GetVaultConfigurationRequest> | undefined): boolean {
    return proto3.util.equals(GetVaultConfigurationRequest, a, b);
  }
}

/**
 * GetVaultConfigurationResponse contains the output parameters for the GetVaultConfiguration endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultConfigurationResponse
 */
export class GetVaultConfigurationResponse extends Message<GetVaultConfigurationResponse> {
  /**
   * @generated from field: string comptroller = 1;
   */
  comptroller = "";

  /**
   * @generated from field: enzyme.enzyme.v1alpha.Release release = 2;
   */
  release = Release.UNSPECIFIED;

  /**
   * @generated from field: bool freely_transferable_shares = 3;
   */
  freelyTransferableShares = false;

  /**
   * @generated from field: bool auto_protocol_fee_shares_buyback = 4;
   */
  autoProtocolFeeSharesBuyback = false;

  /**
   * @generated from field: string gas_relayer = 5;
   */
  gasRelayer = "";

  /**
   * @generated from field: float shares_action_timelock = 6;
   */
  sharesActionTimelock = 0;

  /**
   * @generated from field: repeated enzyme.enzyme.v1alpha.FeeConfiguration fee_configurations = 7;
   */
  feeConfigurations: FeeConfiguration[] = [];

  /**
   * @generated from field: repeated enzyme.enzyme.v1alpha.PolicyConfiguration policy_configurations = 8;
   */
  policyConfigurations: PolicyConfiguration[] = [];

  constructor(data?: PartialMessage<GetVaultConfigurationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultConfigurationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comptroller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "release", kind: "enum", T: proto3.getEnumType(Release) },
    { no: 3, name: "freely_transferable_shares", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "auto_protocol_fee_shares_buyback", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "gas_relayer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shares_action_timelock", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "fee_configurations", kind: "message", T: FeeConfiguration, repeated: true },
    { no: 8, name: "policy_configurations", kind: "message", T: PolicyConfiguration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultConfigurationResponse {
    return new GetVaultConfigurationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultConfigurationResponse {
    return new GetVaultConfigurationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultConfigurationResponse {
    return new GetVaultConfigurationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultConfigurationResponse | PlainMessage<GetVaultConfigurationResponse> | undefined, b: GetVaultConfigurationResponse | PlainMessage<GetVaultConfigurationResponse> | undefined): boolean {
    return proto3.util.equals(GetVaultConfigurationResponse, a, b);
  }
}

/**
 * GetVaultDepositorsRequest contains the input parameters for the GetVaultDepositors endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultDepositorsRequest
 */
export class GetVaultDepositorsRequest extends Message<GetVaultDepositorsRequest> {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 3;
   */
  currency = Currency.UNSPECIFIED;

  constructor(data?: PartialMessage<GetVaultDepositorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultDepositorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultDepositorsRequest {
    return new GetVaultDepositorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultDepositorsRequest {
    return new GetVaultDepositorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultDepositorsRequest {
    return new GetVaultDepositorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultDepositorsRequest | PlainMessage<GetVaultDepositorsRequest> | undefined, b: GetVaultDepositorsRequest | PlainMessage<GetVaultDepositorsRequest> | undefined): boolean {
    return proto3.util.equals(GetVaultDepositorsRequest, a, b);
  }
}

/**
 * GetVaultDepositorsResponse contains the output parameters for the GetVaultDepositors endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultDepositorsResponse
 */
export class GetVaultDepositorsResponse extends Message<GetVaultDepositorsResponse> {
  /**
   * The total number of depositors
   *
   * @generated from field: uint32 number_of_depositors = 1;
   */
  numberOfDepositors = 0;

  /**
   * The current number of shares
   *
   * @generated from field: float number_of_shares = 2;
   */
  numberOfShares = 0;

  /**
   * The list of depositors, which details on each depositor
   *
   * @generated from field: repeated enzyme.enzyme.v1alpha.DepositorItem depositors = 3;
   */
  depositors: DepositorItem[] = [];

  constructor(data?: PartialMessage<GetVaultDepositorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultDepositorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number_of_depositors", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "number_of_shares", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "depositors", kind: "message", T: DepositorItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultDepositorsResponse {
    return new GetVaultDepositorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultDepositorsResponse {
    return new GetVaultDepositorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultDepositorsResponse {
    return new GetVaultDepositorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultDepositorsResponse | PlainMessage<GetVaultDepositorsResponse> | undefined, b: GetVaultDepositorsResponse | PlainMessage<GetVaultDepositorsResponse> | undefined): boolean {
    return proto3.util.equals(GetVaultDepositorsResponse, a, b);
  }
}

/**
 * GetVaultListRequest contains the input parameters for the GetVaultList endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultListRequest
 */
export class GetVaultListRequest extends Message<GetVaultListRequest> {
  /**
   * Request the vault list for a specific deployment
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 2;
   */
  currency = Currency.UNSPECIFIED;

  constructor(data?: PartialMessage<GetVaultListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultListRequest {
    return new GetVaultListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultListRequest {
    return new GetVaultListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultListRequest {
    return new GetVaultListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultListRequest | PlainMessage<GetVaultListRequest> | undefined, b: GetVaultListRequest | PlainMessage<GetVaultListRequest> | undefined): boolean {
    return proto3.util.equals(GetVaultListRequest, a, b);
  }
}

/**
 * GetAssetListResponse contains the output parameters for the GetVaultList endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultListResponse
 */
export class GetVaultListResponse extends Message<GetVaultListResponse> {
  /**
   * Then number of vaults
   *
   * @generated from field: uint32 number_of_vaults = 1;
   */
  numberOfVaults = 0;

  /**
   * The list of vaults with details on each vault
   *
   * @generated from field: repeated enzyme.enzyme.v1alpha.VaultListItem vaults = 2;
   */
  vaults: VaultListItem[] = [];

  constructor(data?: PartialMessage<GetVaultListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number_of_vaults", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "vaults", kind: "message", T: VaultListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultListResponse {
    return new GetVaultListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultListResponse {
    return new GetVaultListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultListResponse {
    return new GetVaultListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultListResponse | PlainMessage<GetVaultListResponse> | undefined, b: GetVaultListResponse | PlainMessage<GetVaultListResponse> | undefined): boolean {
    return proto3.util.equals(GetVaultListResponse, a, b);
  }
}

/**
 * GetVaultPortfolioRequest contains the input parameters for the GetVaultPortfolio endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultPortfolioRequest
 */
export class GetVaultPortfolioRequest extends Message<GetVaultPortfolioRequest> {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 3;
   */
  currency = Currency.UNSPECIFIED;

  constructor(data?: PartialMessage<GetVaultPortfolioRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultPortfolioRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultPortfolioRequest {
    return new GetVaultPortfolioRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultPortfolioRequest {
    return new GetVaultPortfolioRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultPortfolioRequest {
    return new GetVaultPortfolioRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultPortfolioRequest | PlainMessage<GetVaultPortfolioRequest> | undefined, b: GetVaultPortfolioRequest | PlainMessage<GetVaultPortfolioRequest> | undefined): boolean {
    return proto3.util.equals(GetVaultPortfolioRequest, a, b);
  }
}

/**
 * GetVaultPortfolioResponse contains the output parameters for the GetVaultPortfolio endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultPortfolioResponse
 */
export class GetVaultPortfolioResponse extends Message<GetVaultPortfolioResponse> {
  /**
   * The list of indidvidual ERC20 assets currently held by the vault, with details
   *
   * @generated from field: repeated enzyme.enzyme.v1alpha.PortfolioAssetItem assets = 1;
   */
  assets: PortfolioAssetItem[] = [];

  /**
   * The list of individual external positioins currently held by the vault, with details
   *
   * @generated from field: repeated enzyme.enzyme.v1alpha.ExternalPositionItem external_positions = 2;
   */
  externalPositions: ExternalPositionItem[] = [];

  constructor(data?: PartialMessage<GetVaultPortfolioResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultPortfolioResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "message", T: PortfolioAssetItem, repeated: true },
    { no: 2, name: "external_positions", kind: "message", T: ExternalPositionItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultPortfolioResponse {
    return new GetVaultPortfolioResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultPortfolioResponse {
    return new GetVaultPortfolioResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultPortfolioResponse {
    return new GetVaultPortfolioResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultPortfolioResponse | PlainMessage<GetVaultPortfolioResponse> | undefined, b: GetVaultPortfolioResponse | PlainMessage<GetVaultPortfolioResponse> | undefined): boolean {
    return proto3.util.equals(GetVaultPortfolioResponse, a, b);
  }
}

/**
 * GetVaultTimeSeriesRequest contains the input parameters for the GetVaultTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultTimeSeriesRequest
 */
export class GetVaultTimeSeriesRequest extends Message<GetVaultTimeSeriesRequest> {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 3;
   */
  currency = Currency.UNSPECIFIED;

  /**
   * The time range (from/to) of the time series
   *
   * @generated from field: enzyme.enzyme.v1alpha.TimeWindow range = 4;
   */
  range?: TimeWindow;

  /**
   * The time resolution of the time series
   *
   * @generated from field: enzyme.enzyme.v1alpha.Resolution resolution = 5;
   */
  resolution = Resolution.UNSPECIFIED;

  constructor(data?: PartialMessage<GetVaultTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
    { no: 4, name: "range", kind: "message", T: TimeWindow },
    { no: 5, name: "resolution", kind: "enum", T: proto3.getEnumType(Resolution) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultTimeSeriesRequest {
    return new GetVaultTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultTimeSeriesRequest {
    return new GetVaultTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultTimeSeriesRequest {
    return new GetVaultTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultTimeSeriesRequest | PlainMessage<GetVaultTimeSeriesRequest> | undefined, b: GetVaultTimeSeriesRequest | PlainMessage<GetVaultTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(GetVaultTimeSeriesRequest, a, b);
  }
}

/**
 * GetVaultTimeSeriesResponse contains the output parameters for the GetVaultTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultTimeSeriesResponse
 */
export class GetVaultTimeSeriesResponse extends Message<GetVaultTimeSeriesResponse> {
  /**
   * The time series data of the vault
   *
   * @generated from field: repeated enzyme.enzyme.v1alpha.VaultTimeSeriesItem items = 1;
   */
  items: VaultTimeSeriesItem[] = [];

  constructor(data?: PartialMessage<GetVaultTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: VaultTimeSeriesItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultTimeSeriesResponse {
    return new GetVaultTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultTimeSeriesResponse {
    return new GetVaultTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultTimeSeriesResponse {
    return new GetVaultTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultTimeSeriesResponse | PlainMessage<GetVaultTimeSeriesResponse> | undefined, b: GetVaultTimeSeriesResponse | PlainMessage<GetVaultTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(GetVaultTimeSeriesResponse, a, b);
  }
}

/**
 * GetVaultRequest contains the input parameters for the GetVault endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultRequest
 */
export class GetVaultRequest extends Message<GetVaultRequest> {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1alpha.Deployment deployment = 1;
   */
  deployment = Deployment.UNSPECIFIED;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1alpha.Currency currency = 3;
   */
  currency = Currency.UNSPECIFIED;

  constructor(data?: PartialMessage<GetVaultRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment", kind: "enum", T: proto3.getEnumType(Deployment) },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "currency", kind: "enum", T: proto3.getEnumType(Currency) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultRequest {
    return new GetVaultRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultRequest {
    return new GetVaultRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultRequest {
    return new GetVaultRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultRequest | PlainMessage<GetVaultRequest> | undefined, b: GetVaultRequest | PlainMessage<GetVaultRequest> | undefined): boolean {
    return proto3.util.equals(GetVaultRequest, a, b);
  }
}

/**
 * GetVaultResponse contains the output parameters for the GetVault endpoint 
 *
 * @generated from message enzyme.enzyme.v1alpha.GetVaultResponse
 */
export class GetVaultResponse extends Message<GetVaultResponse> {
  /**
   * Vault address
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * Vault name
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Vault symbol
   *
   * @generated from field: string symbol = 3;
   */
  symbol = "";

  /**
   * Owner/manager wallet address
   *
   * @generated from field: string owner = 4;
   */
  owner = "";

  /**
   * Address of the vault comptroller contract
   *
   * @generated from field: string comptroller = 5;
   */
  comptroller = "";

  /**
   * Inception timestamp of the vault
   *
   * @generated from field: google.protobuf.Timestamp inception = 6;
   */
  inception?: Timestamp;

  /**
   * The tagline of the vault
   *
   * @generated from field: string tagline = 7;
   */
  tagline = "";

  /**
   * The description fo the vault
   *
   * @generated from field: string description = 8;
   */
  description = "";

  /**
   * The description of the vault manager
   *
   * @generated from field: string manager_description = 9;
   */
  managerDescription = "";

  /**
   * The symbol of the vault denomination asset
   *
   * @generated from field: string denomination = 10;
   */
  denomination = "";

  /**
   * The current gross asset value of the vault
   *
   * @generated from field: float gross_asset_value = 20;
   */
  grossAssetValue = 0;

  /**
   * The current net asset value of the vault
   *
   * @generated from field: float net_asset_value = 21;
   */
  netAssetValue = 0;

  /**
   * The current share price of the vault
   *
   * @generated from field: float share_price = 22;
   */
  sharePrice = 0;

  /**
   * The current number of shares
   *
   * @generated from field: float number_of_shares = 23;
   */
  numberOfShares = 0;

  constructor(data?: PartialMessage<GetVaultResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1alpha.GetVaultResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "comptroller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "inception", kind: "message", T: Timestamp },
    { no: 7, name: "tagline", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "manager_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "denomination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "gross_asset_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 21, name: "net_asset_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 22, name: "share_price", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 23, name: "number_of_shares", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVaultResponse {
    return new GetVaultResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVaultResponse {
    return new GetVaultResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVaultResponse {
    return new GetVaultResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVaultResponse | PlainMessage<GetVaultResponse> | undefined, b: GetVaultResponse | PlainMessage<GetVaultResponse> | undefined): boolean {
    return proto3.util.equals(GetVaultResponse, a, b);
  }
}


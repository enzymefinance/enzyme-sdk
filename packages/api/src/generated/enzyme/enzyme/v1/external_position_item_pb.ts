// @generated by protoc-gen-es v2.2.0 with parameter "target=ts,import_extension=js"
// @generated from file enzyme/enzyme/v1/external_position_item.proto (package enzyme.enzyme.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { AssetValue } from "./asset_value_pb.js";
import { file_enzyme_enzyme_v1_asset_value } from "./asset_value_pb.js";
import type { AssetBalance } from "./asset_balance_pb.js";
import { file_enzyme_enzyme_v1_asset_balance } from "./asset_balance_pb.js";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file enzyme/enzyme/v1/external_position_item.proto.
 */
export const file_enzyme_enzyme_v1_external_position_item: GenFile = /*@__PURE__*/
  fileDesc("Ci1lbnp5bWUvZW56eW1lL3YxL2V4dGVybmFsX3Bvc2l0aW9uX2l0ZW0ucHJvdG8SEGVuenltZS5lbnp5bWUudjEimQIKFEV4dGVybmFsUG9zaXRpb25JdGVtEg8KB2FkZHJlc3MYASABKAkSDAoEdHlwZRgCIAEoCRINCgV2YWx1ZRgDIAEoAhIPCgd0eXBlX2lkGAQgASgFEg4KBmFjdGl2ZRgFIAEoCBI0Cg5tYW5hZ2VkX2Fzc2V0cxgGIAMoCzIcLmVuenltZS5lbnp5bWUudjEuQXNzZXRWYWx1ZRIxCgtkZWJ0X2Fzc2V0cxgHIAMoCzIcLmVuenltZS5lbnp5bWUudjEuQXNzZXRWYWx1ZRJJCg9hZGRpdGlvbmFsX2luZm8YCCABKAsyMC5lbnp5bWUuZW56eW1lLnYxLkV4dGVybmFsUG9zaXRpb25BZGRpdGlvbmFsSW5mbyLCCAoeRXh0ZXJuYWxQb3NpdGlvbkFkZGl0aW9uYWxJbmZvEkUKDWNvbnZleF92b3RpbmcYASABKAsyLC5lbnp5bWUuZW56eW1lLnYxLkNvbnZleFZvdGluZ0FkZGl0aW9uYWxJbmZvSAASQwoMa2lsbl9zdGFraW5nGAIgASgLMisuZW56eW1lLmVuenltZS52MS5LaWxuU3Rha2luZ0FkZGl0aW9uYWxJbmZvSAASUgoUdGhlX2dyYXBoX2RlbGVnYXRpb24YAyABKAsyMi5lbnp5bWUuZW56eW1lLnYxLlRoZUdyYXBoRGVsZWdhdGlvbkFkZGl0aW9uYWxJbmZvSAASRwoOYXJiaXRyYXJ5X2xvYW4YBCABKAsyLS5lbnp5bWUuZW56eW1lLnYxLkFyYml0cmFyeUxvYW5BZGRpdGlvbmFsSW5mb0gAElIKFHVuaXN3YXBfdjNfbGlxdWlkaXR5GAUgASgLMjIuZW56eW1lLmVuenltZS52MS5Vbmlzd2FwVjNMaXF1aWRpdHlBZGRpdGlvbmFsSW5mb0gAEkkKD21hcGxlX2xpcXVpZGl0eRgGIAEoCzIuLmVuenltZS5lbnp5bWUudjEuTWFwbGVMaXF1aWRpdHlBZGRpdGlvbmFsSW5mb0gAEksKEGxpZG9fd2l0aGRyYXdhbHMYByABKAsyLy5lbnp5bWUuZW56eW1lLnYxLkxpZG9XaXRoZHJhd2Fsc0FkZGl0aW9uYWxJbmZvSAASSgoQY29tcG91bmRfdjJfZGVidBgIIAEoCzIuLmVuenltZS5lbnp5bWUudjEuQ29tcG91bmRWMkRlYnRBZGRpdGlvbmFsSW5mb0gAEkIKDGFhdmVfdjNfZGVidBgJIAEoCzIqLmVuenltZS5lbnp5bWUudjEuQWF2ZVYzRGVidEFkZGl0aW9uYWxJbmZvSAASQwoMbGlxdWl0eV9kZWJ0GAogASgLMisuZW56eW1lLmVuenltZS52MS5MaXF1aXR5RGVidEFkZGl0aW9uYWxJbmZvSAASUwoVc3Rha2Vfd2lzZV92M19zdGFraW5nGAsgASgLMjIuZW56eW1lLmVuenltZS52MS5TdGFrZVdpc2VWM1N0YWtpbmdBZGRpdGlvbmFsSW5mb0gAEj0KCXBlbmRsZV92MhgMIAEoCzIoLmVuenltZS5lbnp5bWUudjEuUGVuZGxlVjJBZGRpdGlvbmFsSW5mb0gAEjYKBWFsaWNlGA0gASgLMiUuZW56eW1lLmVuenltZS52MS5BbGljZUFkZGl0aW9uYWxJbmZvSAASVwoXZ214X3YyX2xldmVyYWdlX3RyYWRpbmcYDiABKAsyNC5lbnp5bWUuZW56eW1lLnYxLkdNWFYyTGV2ZXJhZ2VUcmFkaW5nQWRkaXRpb25hbEluZm9IAEIRCg9hZGRpdGlvbmFsX2luZm8igQEKEENvbnZleFZvdGluZ0xvY2sSDgoGYW1vdW50GAEgASgCEi8KC3VubG9ja190aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIcChRlcG9jaHNfaW5zaWRlX2xvY2tlchgDIAEoBRIOCgZzdGF0dXMYBCABKAkiYQoaQ29udmV4Vm90aW5nQWRkaXRpb25hbEluZm8SEAoIZGVsZWdhdGUYASABKAkSMQoFbG9ja3MYAiADKAsyIi5lbnp5bWUuZW56eW1lLnYxLkNvbnZleFZvdGluZ0xvY2siVAoZS2lsblN0YWtpbmdBZGRpdGlvbmFsSW5mbxIXCg92YWxpZGF0b3JfY291bnQYASABKAUSHgoWdmFsaWRhdG9yc19wdWJsaWNfa2V5cxgCIAMoCSLUAQokVGhlR3JhcGhEZWxlZ2F0aW9uUG9zaXRpb25EZWxlZ2F0aW9uEg8KB2luZGV4ZXIYASABKAkSFAoMaW5kZXhlcl9uYW1lGAIgASgJEg4KBnNoYXJlcxgDIAEoAhIVCg1ncnRfZGVsZWdhdGVkGAQgASgCEhIKCmdydF9sb2NrZWQYBSABKAISNAoQZ3J0X2xvY2tlZF91bnRpbBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFAoMZ3J0X3VubG9ja2VkGAcgASgCIm8KIFRoZUdyYXBoRGVsZWdhdGlvbkFkZGl0aW9uYWxJbmZvEksKC2RlbGVnYXRpb25zGAEgAygLMjYuZW56eW1lLmVuenltZS52MS5UaGVHcmFwaERlbGVnYXRpb25Qb3NpdGlvbkRlbGVnYXRpb24i2wEKG0FyYml0cmFyeUxvYW5BZGRpdGlvbmFsSW5mbxISCgpsb2FuX2Fzc2V0GAEgASgJEhkKEWJvcnJvd2FibGVfYW1vdW50GAIgASgCEhMKC2Rlc2NyaXB0aW9uGAMgASgJEhAKCGJvcnJvd2VyGAQgASgJEhEKCWlzX2Nsb3NlZBgFIAEoCBIdChV0b3RhbF9ib3Jyb3dlZF9hbW91bnQYBiABKAISGwoTdG90YWxfcmVwYWlkX2Ftb3VudBgHIAEoAhIXCg9hbW91bnRfdG9fcmVwYXkYCCABKAIiyAEKGlVuaXN3YXBWM0xpcXVpZGl0eVBvc2l0aW9uEhMKC3Rva2VuX2ZpcnN0GAEgASgJEhQKDHRva2VuX3NlY29uZBgCIAEoCRIRCgl0b2tlbl91cmkYAyABKAkSCwoDZmVlGAQgASgCEhQKDHBvb2xfYWRkcmVzcxgFIAEoCRIRCglsaXF1aWRpdHkYBiABKAISDgoGbmZ0X2lkGAcgASgFEhIKCnRpY2tfbG93ZXIYCCABKAUSEgoKdGlja191cHBlchgJIAEoBSJjCiBVbmlzd2FwVjNMaXF1aWRpdHlBZGRpdGlvbmFsSW5mbxI/Cglwb3NpdGlvbnMYASADKAsyLC5lbnp5bWUuZW56eW1lLnYxLlVuaXN3YXBWM0xpcXVpZGl0eVBvc2l0aW9uIoIBChZNYXBsZUxpcXVpZGl0eVBvc2l0aW9uEhQKDHBvb2xfYWRkcmVzcxgBIAEoCRIRCglwb29sX25hbWUYAiABKAkSPwoXbGlxdWlkaXR5X2Fzc2V0X2JhbGFuY2UYAyABKAsyHi5lbnp5bWUuZW56eW1lLnYxLkFzc2V0QmFsYW5jZSJbChxNYXBsZUxpcXVpZGl0eUFkZGl0aW9uYWxJbmZvEjsKCXBvc2l0aW9ucxgBIAMoCzIoLmVuenltZS5lbnp5bWUudjEuTWFwbGVMaXF1aWRpdHlQb3NpdGlvbiI2ChhBYXZlVjNEZWJ0QWRkaXRpb25hbEluZm8SGgoSZV9tb2RlX2NhdGVnb3J5X2lkGAEgASgFIpYBChZMaWRvV2l0aGRyYXdhbHNSZXF1ZXN0Eg4KBmFtb3VudBgBIAEoAhIKCgJpZBgCIAEoBRIwCgxyZXF1ZXN0ZWRfYXQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCmNsYWltZWRfYXQYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIlsKHUxpZG9XaXRoZHJhd2Fsc0FkZGl0aW9uYWxJbmZvEjoKCHJlcXVlc3RzGAEgAygLMiguZW56eW1lLmVuenltZS52MS5MaWRvV2l0aGRyYXdhbHNSZXF1ZXN0IlUKGUxpcXVpdHlEZWJ0QWRkaXRpb25hbEluZm8SOAoGc3RhdHVzGAEgASgOMiguZW56eW1lLmVuenltZS52MS5MaXF1aXR5RGVidFRyb3ZlU3RhdHVzIjQKHENvbXBvdW5kVjJEZWJ0QWRkaXRpb25hbEluZm8SFAoMY29tcF9hY2NydWVkGAEgASgCIsUBCh1TdGFrZVdpc2VWM1N0YWtpbmdFeGl0UmVxdWVzdBIXCg9wb3NpdGlvbl90aWNrZXQYASABKAkSLgoKY3JlYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKY2xhaW1lZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDgoGc2hhcmVzGAQgASgCEhsKE3ZhdWx0X3Rva2VuX2FkZHJlc3MYBSABKAkiagogU3Rha2VXaXNlVjNTdGFraW5nQWRkaXRpb25hbEluZm8SRgoNZXhpdF9yZXF1ZXN0cxgBIAMoCzIvLmVuenltZS5lbnp5bWUudjEuU3Rha2VXaXNlVjNTdGFraW5nRXhpdFJlcXVlc3QiTwoRUGVuZGxlVjJQdEhvbGRpbmcSEgoKcHRfYWRkcmVzcxgBIAEoCRIOCgZhbW91bnQYAiABKAISFgoObWFya2V0X2FkZHJlc3MYAyABKAkiOwoRUGVuZGxlVjJMcEhvbGRpbmcSFgoObWFya2V0X2FkZHJlc3MYASABKAkSDgoGYW1vdW50GAIgASgCIowBChZQZW5kbGVWMkFkZGl0aW9uYWxJbmZvEjgKC3B0X2hvbGRpbmdzGAEgAygLMiMuZW56eW1lLmVuenltZS52MS5QZW5kbGVWMlB0SG9sZGluZxI4CgtscF9ob2xkaW5ncxgCIAMoCzIjLmVuenltZS5lbnp5bWUudjEuUGVuZGxlVjJMcEhvbGRpbmciVQoiR01YVjJMZXZlcmFnZVRyYWRpbmdBZGRpdGlvbmFsSW5mbxIWCg50cmFja2VkX2Fzc2V0cxgBIAMoCRIXCg90cmFja2VkX21hcmtldHMYAiADKAkiwgEKDkFsaWNlT3JkZXJJbmZvEhAKCG9yZGVyX2lkGAEgASgJEg8KB3JlbW92ZWQYAiABKAgSLgoKcmVtb3ZlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASHgoWb3V0Z29pbmdfYXNzZXRfYWRkcmVzcxgEIAEoCRIdChVvdXRnb2luZ19hc3NldF9hbW91bnQYBSABKAISHgoWaW5jb21pbmdfYXNzZXRfYWRkcmVzcxgGIAEoCSJHChNBbGljZUFkZGl0aW9uYWxJbmZvEjAKBm9yZGVycxgBIAMoCzIgLmVuenltZS5lbnp5bWUudjEuQWxpY2VPcmRlckluZm8qgAEKFkxpcXVpdHlEZWJ0VHJvdmVTdGF0dXMSEAoMTk9OX0VYSVNURU5UEAASCgoGQUNUSVZFEAESEwoPQ0xPU0VEX0JZX09XTkVSEAISGQoVQ0xPU0VEX0JZX0xJUVVJREFUSU9OEAMSGAoUQ0xPU0VEX0JZX1JFREVNUFRJT04QBEKTAQoUY29tLmVuenltZS5lbnp5bWUudjFCGUV4dGVybmFsUG9zaXRpb25JdGVtUHJvdG9QAaICA0VFWKoCEEVuenltZS5Fbnp5bWUuVjHKAhBFbnp5bWVcRW56eW1lXFYx4gIcRW56eW1lXEVuenltZVxWMVxHUEJNZXRhZGF0YeoCEkVuenltZTo6RW56eW1lOjpWMWIGcHJvdG8z", [file_enzyme_enzyme_v1_asset_value, file_enzyme_enzyme_v1_asset_balance, file_google_protobuf_timestamp]);

/**
 * @generated from message enzyme.enzyme.v1.ExternalPositionItem
 */
export type ExternalPositionItem = Message<"enzyme.enzyme.v1.ExternalPositionItem"> & {
  /**
   * The address of the external position
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * The type of the external position
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * The current value of the external position
   *
   * @generated from field: float value = 3;
   */
  value: number;

  /**
   * The type id of the external position
   *
   * @generated from field: int32 type_id = 4;
   */
  typeId: number;

  /**
   * The active status of the external position
   *
   * @generated from field: bool active = 5;
   */
  active: boolean;

  /**
   * The list of managed assets held by the external position
   *
   * @generated from field: repeated enzyme.enzyme.v1.AssetValue managed_assets = 6;
   */
  managedAssets: AssetValue[];

  /**
   * The list of managed assets held by the external position
   *
   * @generated from field: repeated enzyme.enzyme.v1.AssetValue debt_assets = 7;
   */
  debtAssets: AssetValue[];

  /**
   * Additional info about explicit external position type
   *
   * @generated from field: enzyme.enzyme.v1.ExternalPositionAdditionalInfo additional_info = 8;
   */
  additionalInfo?: ExternalPositionAdditionalInfo;
};

/**
 * Describes the message enzyme.enzyme.v1.ExternalPositionItem.
 * Use `create(ExternalPositionItemSchema)` to create a new message.
 */
export const ExternalPositionItemSchema: GenMessage<ExternalPositionItem> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 0);

/**
 * @generated from message enzyme.enzyme.v1.ExternalPositionAdditionalInfo
 */
export type ExternalPositionAdditionalInfo = Message<"enzyme.enzyme.v1.ExternalPositionAdditionalInfo"> & {
  /**
   * @generated from oneof enzyme.enzyme.v1.ExternalPositionAdditionalInfo.additional_info
   */
  additionalInfo: {
    /**
     * @generated from field: enzyme.enzyme.v1.ConvexVotingAdditionalInfo convex_voting = 1;
     */
    value: ConvexVotingAdditionalInfo;
    case: "convexVoting";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.KilnStakingAdditionalInfo kiln_staking = 2;
     */
    value: KilnStakingAdditionalInfo;
    case: "kilnStaking";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.TheGraphDelegationAdditionalInfo the_graph_delegation = 3;
     */
    value: TheGraphDelegationAdditionalInfo;
    case: "theGraphDelegation";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.ArbitraryLoanAdditionalInfo arbitrary_loan = 4;
     */
    value: ArbitraryLoanAdditionalInfo;
    case: "arbitraryLoan";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.UniswapV3LiquidityAdditionalInfo uniswap_v3_liquidity = 5;
     */
    value: UniswapV3LiquidityAdditionalInfo;
    case: "uniswapV3Liquidity";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.MapleLiquidityAdditionalInfo maple_liquidity = 6;
     */
    value: MapleLiquidityAdditionalInfo;
    case: "mapleLiquidity";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.LidoWithdrawalsAdditionalInfo lido_withdrawals = 7;
     */
    value: LidoWithdrawalsAdditionalInfo;
    case: "lidoWithdrawals";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.CompoundV2DebtAdditionalInfo compound_v2_debt = 8;
     */
    value: CompoundV2DebtAdditionalInfo;
    case: "compoundV2Debt";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.AaveV3DebtAdditionalInfo aave_v3_debt = 9;
     */
    value: AaveV3DebtAdditionalInfo;
    case: "aaveV3Debt";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.LiquityDebtAdditionalInfo liquity_debt = 10;
     */
    value: LiquityDebtAdditionalInfo;
    case: "liquityDebt";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.StakeWiseV3StakingAdditionalInfo stake_wise_v3_staking = 11;
     */
    value: StakeWiseV3StakingAdditionalInfo;
    case: "stakeWiseV3Staking";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.PendleV2AdditionalInfo pendle_v2 = 12;
     */
    value: PendleV2AdditionalInfo;
    case: "pendleV2";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.AliceAdditionalInfo alice = 13;
     */
    value: AliceAdditionalInfo;
    case: "alice";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.GMXV2LeverageTradingAdditionalInfo gmx_v2_leverage_trading = 14;
     */
    value: GMXV2LeverageTradingAdditionalInfo;
    case: "gmxV2LeverageTrading";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message enzyme.enzyme.v1.ExternalPositionAdditionalInfo.
 * Use `create(ExternalPositionAdditionalInfoSchema)` to create a new message.
 */
export const ExternalPositionAdditionalInfoSchema: GenMessage<ExternalPositionAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 1);

/**
 * @generated from message enzyme.enzyme.v1.ConvexVotingLock
 */
export type ConvexVotingLock = Message<"enzyme.enzyme.v1.ConvexVotingLock"> & {
  /**
   * The amount of locked tokens
   *
   * @generated from field: float amount = 1;
   */
  amount: number;

  /**
   * The timestamp when the lock expires
   *
   * @generated from field: google.protobuf.Timestamp unlock_time = 2;
   */
  unlockTime?: Timestamp;

  /**
   * @generated from field: int32 epochs_inside_locker = 3;
   */
  epochsInsideLocker: number;

  /**
   * Possible statuses: LOCKED, UNLOCKED, UNLOCKED_WITH_BOUNTY
   *
   * @generated from field: string status = 4;
   */
  status: string;
};

/**
 * Describes the message enzyme.enzyme.v1.ConvexVotingLock.
 * Use `create(ConvexVotingLockSchema)` to create a new message.
 */
export const ConvexVotingLockSchema: GenMessage<ConvexVotingLock> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 2);

/**
 * @generated from message enzyme.enzyme.v1.ConvexVotingAdditionalInfo
 */
export type ConvexVotingAdditionalInfo = Message<"enzyme.enzyme.v1.ConvexVotingAdditionalInfo"> & {
  /**
   * The address of the convex voting delegate
   *
   * @generated from field: string delegate = 1;
   */
  delegate: string;

  /**
   * The list of locks
   *
   * @generated from field: repeated enzyme.enzyme.v1.ConvexVotingLock locks = 2;
   */
  locks: ConvexVotingLock[];
};

/**
 * Describes the message enzyme.enzyme.v1.ConvexVotingAdditionalInfo.
 * Use `create(ConvexVotingAdditionalInfoSchema)` to create a new message.
 */
export const ConvexVotingAdditionalInfoSchema: GenMessage<ConvexVotingAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 3);

/**
 * @generated from message enzyme.enzyme.v1.KilnStakingAdditionalInfo
 */
export type KilnStakingAdditionalInfo = Message<"enzyme.enzyme.v1.KilnStakingAdditionalInfo"> & {
  /**
   * The validator count
   *
   * @generated from field: int32 validator_count = 1;
   */
  validatorCount: number;

  /**
   * The list of validators public keys
   *
   * @generated from field: repeated string validators_public_keys = 2;
   */
  validatorsPublicKeys: string[];
};

/**
 * Describes the message enzyme.enzyme.v1.KilnStakingAdditionalInfo.
 * Use `create(KilnStakingAdditionalInfoSchema)` to create a new message.
 */
export const KilnStakingAdditionalInfoSchema: GenMessage<KilnStakingAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 4);

/**
 * @generated from message enzyme.enzyme.v1.TheGraphDelegationPositionDelegation
 */
export type TheGraphDelegationPositionDelegation = Message<"enzyme.enzyme.v1.TheGraphDelegationPositionDelegation"> & {
  /**
   * The address of indexer that the delegation is made to
   *
   * @generated from field: string indexer = 1;
   */
  indexer: string;

  /**
   * The name of indexer
   *
   * @generated from field: string indexer_name = 2;
   */
  indexerName: string;

  /**
   * The amount of indexer's shares
   *
   * @generated from field: float shares = 3;
   */
  shares: number;

  /**
   * The amount of GRT tokens delegated to the indexer
   *
   * @generated from field: float grt_delegated = 4;
   */
  grtDelegated: number;

  /**
   * The amount of GRT tokens locked in the delegation, in the 28-days unbouding period
   *
   * @generated from field: float grt_locked = 5;
   */
  grtLocked: number;

  /**
   * Timestamp when the locked period ends
   *
   * @generated from field: google.protobuf.Timestamp grt_locked_until = 6;
   */
  grtLockedUntil?: Timestamp;

  /**
   * The number of GRT tokens unlocked in the delegation, that is ready to be withdrawn or re-delegated
   *
   * @generated from field: float grt_unlocked = 7;
   */
  grtUnlocked: number;
};

/**
 * Describes the message enzyme.enzyme.v1.TheGraphDelegationPositionDelegation.
 * Use `create(TheGraphDelegationPositionDelegationSchema)` to create a new message.
 */
export const TheGraphDelegationPositionDelegationSchema: GenMessage<TheGraphDelegationPositionDelegation> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 5);

/**
 * @generated from message enzyme.enzyme.v1.TheGraphDelegationAdditionalInfo
 */
export type TheGraphDelegationAdditionalInfo = Message<"enzyme.enzyme.v1.TheGraphDelegationAdditionalInfo"> & {
  /**
   * The list of delegations
   *
   * @generated from field: repeated enzyme.enzyme.v1.TheGraphDelegationPositionDelegation delegations = 1;
   */
  delegations: TheGraphDelegationPositionDelegation[];
};

/**
 * Describes the message enzyme.enzyme.v1.TheGraphDelegationAdditionalInfo.
 * Use `create(TheGraphDelegationAdditionalInfoSchema)` to create a new message.
 */
export const TheGraphDelegationAdditionalInfoSchema: GenMessage<TheGraphDelegationAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 6);

/**
 * @generated from message enzyme.enzyme.v1.ArbitraryLoanAdditionalInfo
 */
export type ArbitraryLoanAdditionalInfo = Message<"enzyme.enzyme.v1.ArbitraryLoanAdditionalInfo"> & {
  /**
   * The address of the loan asset
   *
   * @generated from field: string loan_asset = 1;
   */
  loanAsset: string;

  /**
   * The amount that is possible to borrow
   *
   * @generated from field: float borrowable_amount = 2;
   */
  borrowableAmount: number;

  /**
   * Loan description
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * The address of the borrower
   *
   * @generated from field: string borrower = 4;
   */
  borrower: string;

  /**
   * Whether the loan is closed
   *
   * @generated from field: bool is_closed = 5;
   */
  isClosed: boolean;

  /**
   * Total borrowed amount through history of the loan
   *
   * @generated from field: float total_borrowed_amount = 6;
   */
  totalBorrowedAmount: number;

  /**
   * Total repaid amount through history of the loan
   *
   * @generated from field: float total_repaid_amount = 7;
   */
  totalRepaidAmount: number;

  /**
   * Amount left to repay
   *
   * @generated from field: float amount_to_repay = 8;
   */
  amountToRepay: number;
};

/**
 * Describes the message enzyme.enzyme.v1.ArbitraryLoanAdditionalInfo.
 * Use `create(ArbitraryLoanAdditionalInfoSchema)` to create a new message.
 */
export const ArbitraryLoanAdditionalInfoSchema: GenMessage<ArbitraryLoanAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 7);

/**
 * @generated from message enzyme.enzyme.v1.UniswapV3LiquidityPosition
 */
export type UniswapV3LiquidityPosition = Message<"enzyme.enzyme.v1.UniswapV3LiquidityPosition"> & {
  /**
   * First token of the pool
   *
   * @generated from field: string token_first = 1;
   */
  tokenFirst: string;

  /**
   * Second token of the pool
   *
   * @generated from field: string token_second = 2;
   */
  tokenSecond: string;

  /**
   * The URI of the nft
   *
   * @generated from field: string token_uri = 3;
   */
  tokenUri: string;

  /**
   * The fee collected by the pool
   *
   * @generated from field: float fee = 4;
   */
  fee: number;

  /**
   * The address of the pool
   *
   * @generated from field: string pool_address = 5;
   */
  poolAddress: string;

  /**
   * The liquidity of the position supplied by the user
   *
   * @generated from field: float liquidity = 6;
   */
  liquidity: number;

  /**
   * The id of the nft
   *
   * @generated from field: int32 nft_id = 7;
   */
  nftId: number;

  /**
   * The lower tick of the position
   *
   * @generated from field: int32 tick_lower = 8;
   */
  tickLower: number;

  /**
   * The upper tick of the position
   *
   * @generated from field: int32 tick_upper = 9;
   */
  tickUpper: number;
};

/**
 * Describes the message enzyme.enzyme.v1.UniswapV3LiquidityPosition.
 * Use `create(UniswapV3LiquidityPositionSchema)` to create a new message.
 */
export const UniswapV3LiquidityPositionSchema: GenMessage<UniswapV3LiquidityPosition> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 8);

/**
 * @generated from message enzyme.enzyme.v1.UniswapV3LiquidityAdditionalInfo
 */
export type UniswapV3LiquidityAdditionalInfo = Message<"enzyme.enzyme.v1.UniswapV3LiquidityAdditionalInfo"> & {
  /**
   * The list of positions represented as nfts
   *
   * @generated from field: repeated enzyme.enzyme.v1.UniswapV3LiquidityPosition positions = 1;
   */
  positions: UniswapV3LiquidityPosition[];
};

/**
 * Describes the message enzyme.enzyme.v1.UniswapV3LiquidityAdditionalInfo.
 * Use `create(UniswapV3LiquidityAdditionalInfoSchema)` to create a new message.
 */
export const UniswapV3LiquidityAdditionalInfoSchema: GenMessage<UniswapV3LiquidityAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 9);

/**
 * @generated from message enzyme.enzyme.v1.MapleLiquidityPosition
 */
export type MapleLiquidityPosition = Message<"enzyme.enzyme.v1.MapleLiquidityPosition"> & {
  /**
   * The address of the pool
   *
   * @generated from field: string pool_address = 1;
   */
  poolAddress: string;

  /**
   * The name of the pool
   *
   * @generated from field: string pool_name = 2;
   */
  poolName: string;

  /**
   * The liquidity of the position supplied by the user
   *
   * @generated from field: enzyme.enzyme.v1.AssetBalance liquidity_asset_balance = 3;
   */
  liquidityAssetBalance?: AssetBalance;
};

/**
 * Describes the message enzyme.enzyme.v1.MapleLiquidityPosition.
 * Use `create(MapleLiquidityPositionSchema)` to create a new message.
 */
export const MapleLiquidityPositionSchema: GenMessage<MapleLiquidityPosition> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 10);

/**
 * @generated from message enzyme.enzyme.v1.MapleLiquidityAdditionalInfo
 */
export type MapleLiquidityAdditionalInfo = Message<"enzyme.enzyme.v1.MapleLiquidityAdditionalInfo"> & {
  /**
   * all maple pools in which the user has liquidity
   *
   * @generated from field: repeated enzyme.enzyme.v1.MapleLiquidityPosition positions = 1;
   */
  positions: MapleLiquidityPosition[];
};

/**
 * Describes the message enzyme.enzyme.v1.MapleLiquidityAdditionalInfo.
 * Use `create(MapleLiquidityAdditionalInfoSchema)` to create a new message.
 */
export const MapleLiquidityAdditionalInfoSchema: GenMessage<MapleLiquidityAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 11);

/**
 * @generated from message enzyme.enzyme.v1.AaveV3DebtAdditionalInfo
 */
export type AaveV3DebtAdditionalInfo = Message<"enzyme.enzyme.v1.AaveV3DebtAdditionalInfo"> & {
  /**
   * EMode category id, each number represents a different category, for example ETH correlated
   *
   * @generated from field: int32 e_mode_category_id = 1;
   */
  eModeCategoryId: number;
};

/**
 * Describes the message enzyme.enzyme.v1.AaveV3DebtAdditionalInfo.
 * Use `create(AaveV3DebtAdditionalInfoSchema)` to create a new message.
 */
export const AaveV3DebtAdditionalInfoSchema: GenMessage<AaveV3DebtAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 12);

/**
 * @generated from message enzyme.enzyme.v1.LidoWithdrawalsRequest
 */
export type LidoWithdrawalsRequest = Message<"enzyme.enzyme.v1.LidoWithdrawalsRequest"> & {
  /**
   * The amount of requested tokens
   *
   * @generated from field: float amount = 1;
   */
  amount: number;

  /**
   * The id of withdrawal request
   *
   * @generated from field: int32 id = 2;
   */
  id: number;

  /**
   * The timestamp when the request was made
   *
   * @generated from field: google.protobuf.Timestamp requested_at = 3;
   */
  requestedAt?: Timestamp;

  /**
   * The timestamp when the request was claimed
   *
   * @generated from field: google.protobuf.Timestamp claimed_at = 4;
   */
  claimedAt?: Timestamp;
};

/**
 * Describes the message enzyme.enzyme.v1.LidoWithdrawalsRequest.
 * Use `create(LidoWithdrawalsRequestSchema)` to create a new message.
 */
export const LidoWithdrawalsRequestSchema: GenMessage<LidoWithdrawalsRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 13);

/**
 * @generated from message enzyme.enzyme.v1.LidoWithdrawalsAdditionalInfo
 */
export type LidoWithdrawalsAdditionalInfo = Message<"enzyme.enzyme.v1.LidoWithdrawalsAdditionalInfo"> & {
  /**
   * The list of requests
   *
   * @generated from field: repeated enzyme.enzyme.v1.LidoWithdrawalsRequest requests = 1;
   */
  requests: LidoWithdrawalsRequest[];
};

/**
 * Describes the message enzyme.enzyme.v1.LidoWithdrawalsAdditionalInfo.
 * Use `create(LidoWithdrawalsAdditionalInfoSchema)` to create a new message.
 */
export const LidoWithdrawalsAdditionalInfoSchema: GenMessage<LidoWithdrawalsAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 14);

/**
 * @generated from message enzyme.enzyme.v1.LiquityDebtAdditionalInfo
 */
export type LiquityDebtAdditionalInfo = Message<"enzyme.enzyme.v1.LiquityDebtAdditionalInfo"> & {
  /**
   * The trove status
   *
   * @generated from field: enzyme.enzyme.v1.LiquityDebtTroveStatus status = 1;
   */
  status: LiquityDebtTroveStatus;
};

/**
 * Describes the message enzyme.enzyme.v1.LiquityDebtAdditionalInfo.
 * Use `create(LiquityDebtAdditionalInfoSchema)` to create a new message.
 */
export const LiquityDebtAdditionalInfoSchema: GenMessage<LiquityDebtAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 15);

/**
 * @generated from message enzyme.enzyme.v1.CompoundV2DebtAdditionalInfo
 */
export type CompoundV2DebtAdditionalInfo = Message<"enzyme.enzyme.v1.CompoundV2DebtAdditionalInfo"> & {
  /**
   * Claimable accrued comp tokens
   *
   * @generated from field: float comp_accrued = 1;
   */
  compAccrued: number;
};

/**
 * Describes the message enzyme.enzyme.v1.CompoundV2DebtAdditionalInfo.
 * Use `create(CompoundV2DebtAdditionalInfoSchema)` to create a new message.
 */
export const CompoundV2DebtAdditionalInfoSchema: GenMessage<CompoundV2DebtAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 16);

/**
 * @generated from message enzyme.enzyme.v1.StakeWiseV3StakingExitRequest
 */
export type StakeWiseV3StakingExitRequest = Message<"enzyme.enzyme.v1.StakeWiseV3StakingExitRequest"> & {
  /**
   * Id of the position ticket
   *
   * @generated from field: string position_ticket = 1;
   */
  positionTicket: string;

  /**
   * The timestamp when the exit request was made
   *
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * The timestamp when the exit request was claimed
   *
   * @generated from field: google.protobuf.Timestamp claimed_at = 3;
   */
  claimedAt?: Timestamp;

  /**
   * The number of shares to be exited
   *
   * @generated from field: float shares = 4;
   */
  shares: number;

  /**
   * The address of the vault token
   *
   * @generated from field: string vault_token_address = 5;
   */
  vaultTokenAddress: string;
};

/**
 * Describes the message enzyme.enzyme.v1.StakeWiseV3StakingExitRequest.
 * Use `create(StakeWiseV3StakingExitRequestSchema)` to create a new message.
 */
export const StakeWiseV3StakingExitRequestSchema: GenMessage<StakeWiseV3StakingExitRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 17);

/**
 * @generated from message enzyme.enzyme.v1.StakeWiseV3StakingAdditionalInfo
 */
export type StakeWiseV3StakingAdditionalInfo = Message<"enzyme.enzyme.v1.StakeWiseV3StakingAdditionalInfo"> & {
  /**
   * The list of exit requests
   *
   * @generated from field: repeated enzyme.enzyme.v1.StakeWiseV3StakingExitRequest exit_requests = 1;
   */
  exitRequests: StakeWiseV3StakingExitRequest[];
};

/**
 * Describes the message enzyme.enzyme.v1.StakeWiseV3StakingAdditionalInfo.
 * Use `create(StakeWiseV3StakingAdditionalInfoSchema)` to create a new message.
 */
export const StakeWiseV3StakingAdditionalInfoSchema: GenMessage<StakeWiseV3StakingAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 18);

/**
 * @generated from message enzyme.enzyme.v1.PendleV2PtHolding
 */
export type PendleV2PtHolding = Message<"enzyme.enzyme.v1.PendleV2PtHolding"> & {
  /**
   * The address of the pt holding
   *
   * @generated from field: string pt_address = 1;
   */
  ptAddress: string;

  /**
   * The amount of pt tokens
   *
   * @generated from field: float amount = 2;
   */
  amount: number;

  /**
   * The address of the market
   *
   * @generated from field: string market_address = 3;
   */
  marketAddress: string;
};

/**
 * Describes the message enzyme.enzyme.v1.PendleV2PtHolding.
 * Use `create(PendleV2PtHoldingSchema)` to create a new message.
 */
export const PendleV2PtHoldingSchema: GenMessage<PendleV2PtHolding> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 19);

/**
 * @generated from message enzyme.enzyme.v1.PendleV2LpHolding
 */
export type PendleV2LpHolding = Message<"enzyme.enzyme.v1.PendleV2LpHolding"> & {
  /**
   * The address of the market, market address is also the address of lp token
   *
   * @generated from field: string market_address = 1;
   */
  marketAddress: string;

  /**
   * The amount of lp tokens
   *
   * @generated from field: float amount = 2;
   */
  amount: number;
};

/**
 * Describes the message enzyme.enzyme.v1.PendleV2LpHolding.
 * Use `create(PendleV2LpHoldingSchema)` to create a new message.
 */
export const PendleV2LpHoldingSchema: GenMessage<PendleV2LpHolding> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 20);

/**
 * @generated from message enzyme.enzyme.v1.PendleV2AdditionalInfo
 */
export type PendleV2AdditionalInfo = Message<"enzyme.enzyme.v1.PendleV2AdditionalInfo"> & {
  /**
   * The list of pt holdings
   *
   * @generated from field: repeated enzyme.enzyme.v1.PendleV2PtHolding pt_holdings = 1;
   */
  ptHoldings: PendleV2PtHolding[];

  /**
   * The list of lp holdings
   *
   * @generated from field: repeated enzyme.enzyme.v1.PendleV2LpHolding lp_holdings = 2;
   */
  lpHoldings: PendleV2LpHolding[];
};

/**
 * Describes the message enzyme.enzyme.v1.PendleV2AdditionalInfo.
 * Use `create(PendleV2AdditionalInfoSchema)` to create a new message.
 */
export const PendleV2AdditionalInfoSchema: GenMessage<PendleV2AdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 21);

/**
 * @generated from message enzyme.enzyme.v1.GMXV2LeverageTradingAdditionalInfo
 */
export type GMXV2LeverageTradingAdditionalInfo = Message<"enzyme.enzyme.v1.GMXV2LeverageTradingAdditionalInfo"> & {
  /**
   * The list of tracked assets
   *
   * @generated from field: repeated string tracked_assets = 1;
   */
  trackedAssets: string[];

  /**
   * The list of tracked markets
   *
   * @generated from field: repeated string tracked_markets = 2;
   */
  trackedMarkets: string[];
};

/**
 * Describes the message enzyme.enzyme.v1.GMXV2LeverageTradingAdditionalInfo.
 * Use `create(GMXV2LeverageTradingAdditionalInfoSchema)` to create a new message.
 */
export const GMXV2LeverageTradingAdditionalInfoSchema: GenMessage<GMXV2LeverageTradingAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 22);

/**
 * @generated from message enzyme.enzyme.v1.AliceOrderInfo
 */
export type AliceOrderInfo = Message<"enzyme.enzyme.v1.AliceOrderInfo"> & {
  /**
   * Id of the order
   *
   * @generated from field: string order_id = 1;
   */
  orderId: string;

  /**
   * Whether the order was removed
   *
   * @generated from field: bool removed = 2;
   */
  removed: boolean;

  /**
   * The timestamp the order was removed
   *
   * @generated from field: google.protobuf.Timestamp removed_at = 3;
   */
  removedAt?: Timestamp;

  /**
   * The outgoing asset address
   *
   * @generated from field: string outgoing_asset_address = 4;
   */
  outgoingAssetAddress: string;

  /**
   * The outgoing asset amount
   *
   * @generated from field: float outgoing_asset_amount = 5;
   */
  outgoingAssetAmount: number;

  /**
   * The incoming asset address;
   *
   * @generated from field: string incoming_asset_address = 6;
   */
  incomingAssetAddress: string;
};

/**
 * Describes the message enzyme.enzyme.v1.AliceOrderInfo.
 * Use `create(AliceOrderInfoSchema)` to create a new message.
 */
export const AliceOrderInfoSchema: GenMessage<AliceOrderInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 23);

/**
 * @generated from message enzyme.enzyme.v1.AliceAdditionalInfo
 */
export type AliceAdditionalInfo = Message<"enzyme.enzyme.v1.AliceAdditionalInfo"> & {
  /**
   * The list of outstanding orderIds
   *
   * @generated from field: repeated enzyme.enzyme.v1.AliceOrderInfo orders = 1;
   */
  orders: AliceOrderInfo[];
};

/**
 * Describes the message enzyme.enzyme.v1.AliceAdditionalInfo.
 * Use `create(AliceAdditionalInfoSchema)` to create a new message.
 */
export const AliceAdditionalInfoSchema: GenMessage<AliceAdditionalInfo> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_external_position_item, 24);

/**
 * @generated from enum enzyme.enzyme.v1.LiquityDebtTroveStatus
 */
export enum LiquityDebtTroveStatus {
  /**
   * @generated from enum value: NON_EXISTENT = 0;
   */
  NON_EXISTENT = 0,

  /**
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * @generated from enum value: CLOSED_BY_OWNER = 2;
   */
  CLOSED_BY_OWNER = 2,

  /**
   * @generated from enum value: CLOSED_BY_LIQUIDATION = 3;
   */
  CLOSED_BY_LIQUIDATION = 3,

  /**
   * @generated from enum value: CLOSED_BY_REDEMPTION = 4;
   */
  CLOSED_BY_REDEMPTION = 4,
}

/**
 * Describes the enum enzyme.enzyme.v1.LiquityDebtTroveStatus.
 */
export const LiquityDebtTroveStatusSchema: GenEnum<LiquityDebtTroveStatus> = /*@__PURE__*/
  enumDesc(file_enzyme_enzyme_v1_external_position_item, 0);


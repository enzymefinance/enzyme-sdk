// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file enzyme/enzyme/v1/enzyme.proto (package enzyme.enzyme.v1, syntax proto3)
/* eslint-disable */

// This package contains all endpoints of the Enzyme API 

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AssetItem } from "./asset_item_pb";
import { file_enzyme_enzyme_v1_asset_item } from "./asset_item_pb";
import type { DepositorItem } from "./depositor_item_pb";
import { file_enzyme_enzyme_v1_depositor_item } from "./depositor_item_pb";
import type { DepositorTimeSeriesItem } from "./depositor_time_series_item_pb";
import { file_enzyme_enzyme_v1_depositor_time_series_item } from "./depositor_time_series_item_pb";
import type { Currency, Deployment, Release, Resolution } from "./enums_pb";
import { file_enzyme_enzyme_v1_enums } from "./enums_pb";
import type { ExternalPositionItem } from "./external_position_item_pb";
import { file_enzyme_enzyme_v1_external_position_item } from "./external_position_item_pb";
import type { FeeConfiguration } from "./fee_configuration_pb";
import { file_enzyme_enzyme_v1_fee_configuration } from "./fee_configuration_pb";
import type { ManagerTimeSeriesItem } from "./manager_time_series_item_pb";
import { file_enzyme_enzyme_v1_manager_time_series_item } from "./manager_time_series_item_pb";
import type { NetworkTimeSeriesItem } from "./network_time_series_item_pb";
import { file_enzyme_enzyme_v1_network_time_series_item } from "./network_time_series_item_pb";
import type { PolicyConfiguration } from "./policy_configuration_pb";
import { file_enzyme_enzyme_v1_policy_configuration } from "./policy_configuration_pb";
import type { PortfolioAssetItem } from "./portfolio_asset_item_pb";
import { file_enzyme_enzyme_v1_portfolio_asset_item } from "./portfolio_asset_item_pb";
import type { TimeWindow } from "./time_window_pb";
import { file_enzyme_enzyme_v1_time_window } from "./time_window_pb";
import type { VaultActivities } from "./vault_activities_pb";
import { file_enzyme_enzyme_v1_vault_activities } from "./vault_activities_pb";
import type { VaultListItem } from "./vault_list_item_pb";
import { file_enzyme_enzyme_v1_vault_list_item } from "./vault_list_item_pb";
import type { VaultTimeSeriesItem } from "./vault_time_series_item_pb";
import { file_enzyme_enzyme_v1_vault_time_series_item } from "./vault_time_series_item_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file enzyme/enzyme/v1/enzyme.proto.
 */
export const file_enzyme_enzyme_v1_enzyme: GenFile = /*@__PURE__*/
  fileDesc("Ch1lbnp5bWUvZW56eW1lL3YxL2VuenltZS5wcm90bxIQZW56eW1lLmVuenltZS52MSJ1ChNHZXRBc3NldExpc3RSZXF1ZXN0EjAKCmRlcGxveW1lbnQYASABKA4yHC5lbnp5bWUuZW56eW1lLnYxLkRlcGxveW1lbnQSLAoIY3VycmVuY3kYAiABKA4yGi5lbnp5bWUuZW56eW1lLnYxLkN1cnJlbmN5Il0KFEdldEFzc2V0TGlzdFJlc3BvbnNlEhgKEG51bWJlcl9vZl9hc3NldHMYASABKA0SKwoGYXNzZXRzGAIgAygLMhsuZW56eW1lLmVuenltZS52MS5Bc3NldEl0ZW0i+wEKHUdldERlcG9zaXRvclRpbWVTZXJpZXNSZXF1ZXN0EjAKCmRlcGxveW1lbnQYASABKA4yHC5lbnp5bWUuZW56eW1lLnYxLkRlcGxveW1lbnQSGwoTZGVwb3NpdG9yX2FkZHJlc3NlcxgCIAMoCRIsCghjdXJyZW5jeRgDIAEoDjIaLmVuenltZS5lbnp5bWUudjEuQ3VycmVuY3kSKwoFcmFuZ2UYBCABKAsyHC5lbnp5bWUuZW56eW1lLnYxLlRpbWVXaW5kb3cSMAoKcmVzb2x1dGlvbhgFIAEoDjIcLmVuenltZS5lbnp5bWUudjEuUmVzb2x1dGlvbiJaCh5HZXREZXBvc2l0b3JUaW1lU2VyaWVzUmVzcG9uc2USOAoFaXRlbXMYASADKAsyKS5lbnp5bWUuZW56eW1lLnYxLkRlcG9zaXRvclRpbWVTZXJpZXNJdGVtIvUBChtHZXRNYW5hZ2VyVGltZVNlcmllc1JlcXVlc3QSMAoKZGVwbG95bWVudBgBIAEoDjIcLmVuenltZS5lbnp5bWUudjEuRGVwbG95bWVudBIXCg92YXVsdF9hZGRyZXNzZXMYAiADKAkSLAoIY3VycmVuY3kYAyABKA4yGi5lbnp5bWUuZW56eW1lLnYxLkN1cnJlbmN5EisKBXJhbmdlGAQgASgLMhwuZW56eW1lLmVuenltZS52MS5UaW1lV2luZG93EjAKCnJlc29sdXRpb24YBSABKA4yHC5lbnp5bWUuZW56eW1lLnYxLlJlc29sdXRpb24iVgocR2V0TWFuYWdlclRpbWVTZXJpZXNSZXNwb25zZRI2CgVpdGVtcxgBIAMoCzInLmVuenltZS5lbnp5bWUudjEuTWFuYWdlclRpbWVTZXJpZXNJdGVtIiAKHkdldE5ldHdvcmtGZWVTdGF0aXN0aWNzUmVxdWVzdCJ6Ch9HZXROZXR3b3JrRmVlU3RhdGlzdGljc1Jlc3BvbnNlEhoKEm1sbl9idXJuZWRfdG9fZGF0ZRgBIAEoAhIbChNuZXR3b3JrX2ZlZV90b19kYXRlGAIgASgCEh4KFm5ldHdvcmtfZmVlX2FubnVhbGl6ZWQYAyABKAIi3AEKG0dldE5ldHdvcmtUaW1lU2VyaWVzUmVxdWVzdBIwCgpkZXBsb3ltZW50GAEgASgOMhwuZW56eW1lLmVuenltZS52MS5EZXBsb3ltZW50EiwKCGN1cnJlbmN5GAIgASgOMhouZW56eW1lLmVuenltZS52MS5DdXJyZW5jeRIrCgVyYW5nZRgDIAEoCzIcLmVuenltZS5lbnp5bWUudjEuVGltZVdpbmRvdxIwCgpyZXNvbHV0aW9uGAQgASgOMhwuZW56eW1lLmVuenltZS52MS5SZXNvbHV0aW9uIlYKHEdldE5ldHdvcmtUaW1lU2VyaWVzUmVzcG9uc2USNgoFaXRlbXMYASADKAsyJy5lbnp5bWUuZW56eW1lLnYxLk5ldHdvcmtUaW1lU2VyaWVzSXRlbSKPAQocR2V0VmF1bHRDb25maWd1cmF0aW9uUmVxdWVzdBIwCgpkZXBsb3ltZW50GAEgASgOMhwuZW56eW1lLmVuenltZS52MS5EZXBsb3ltZW50Eg8KB2FkZHJlc3MYAiABKAkSLAoIY3VycmVuY3kYAyABKA4yGi5lbnp5bWUuZW56eW1lLnYxLkN1cnJlbmN5IukCCh1HZXRWYXVsdENvbmZpZ3VyYXRpb25SZXNwb25zZRITCgtjb21wdHJvbGxlchgBIAEoCRIqCgdyZWxlYXNlGAIgASgOMhkuZW56eW1lLmVuenltZS52MS5SZWxlYXNlEiIKGmZyZWVseV90cmFuc2ZlcmFibGVfc2hhcmVzGAMgASgIEigKIGF1dG9fcHJvdG9jb2xfZmVlX3NoYXJlc19idXliYWNrGAQgASgIEhMKC2dhc19yZWxheWVyGAUgASgJEh4KFnNoYXJlc19hY3Rpb25fdGltZWxvY2sYBiABKAISPgoSZmVlX2NvbmZpZ3VyYXRpb25zGAcgAygLMiIuZW56eW1lLmVuenltZS52MS5GZWVDb25maWd1cmF0aW9uEkQKFXBvbGljeV9jb25maWd1cmF0aW9ucxgIIAMoCzIlLmVuenltZS5lbnp5bWUudjEuUG9saWN5Q29uZmlndXJhdGlvbiKMAQoZR2V0VmF1bHREZXBvc2l0b3JzUmVxdWVzdBIwCgpkZXBsb3ltZW50GAEgASgOMhwuZW56eW1lLmVuenltZS52MS5EZXBsb3ltZW50Eg8KB2FkZHJlc3MYAiABKAkSLAoIY3VycmVuY3kYAyABKA4yGi5lbnp5bWUuZW56eW1lLnYxLkN1cnJlbmN5IokBChpHZXRWYXVsdERlcG9zaXRvcnNSZXNwb25zZRIcChRudW1iZXJfb2ZfZGVwb3NpdG9ycxgBIAEoDRIYChBudW1iZXJfb2Zfc2hhcmVzGAIgASgCEjMKCmRlcG9zaXRvcnMYAyADKAsyHy5lbnp5bWUuZW56eW1lLnYxLkRlcG9zaXRvckl0ZW0idQoTR2V0VmF1bHRMaXN0UmVxdWVzdBIwCgpkZXBsb3ltZW50GAEgASgOMhwuZW56eW1lLmVuenltZS52MS5EZXBsb3ltZW50EiwKCGN1cnJlbmN5GAIgASgOMhouZW56eW1lLmVuenltZS52MS5DdXJyZW5jeSJhChRHZXRWYXVsdExpc3RSZXNwb25zZRIYChBudW1iZXJfb2ZfdmF1bHRzGAEgASgNEi8KBnZhdWx0cxgCIAMoCzIfLmVuenltZS5lbnp5bWUudjEuVmF1bHRMaXN0SXRlbSKLAQoYR2V0VmF1bHRQb3J0Zm9saW9SZXF1ZXN0EjAKCmRlcGxveW1lbnQYASABKA4yHC5lbnp5bWUuZW56eW1lLnYxLkRlcGxveW1lbnQSDwoHYWRkcmVzcxgCIAEoCRIsCghjdXJyZW5jeRgDIAEoDjIaLmVuenltZS5lbnp5bWUudjEuQ3VycmVuY3kilQEKGUdldFZhdWx0UG9ydGZvbGlvUmVzcG9uc2USNAoGYXNzZXRzGAEgAygLMiQuZW56eW1lLmVuenltZS52MS5Qb3J0Zm9saW9Bc3NldEl0ZW0SQgoSZXh0ZXJuYWxfcG9zaXRpb25zGAIgAygLMiYuZW56eW1lLmVuenltZS52MS5FeHRlcm5hbFBvc2l0aW9uSXRlbSLrAQoZR2V0VmF1bHRUaW1lU2VyaWVzUmVxdWVzdBIwCgpkZXBsb3ltZW50GAEgASgOMhwuZW56eW1lLmVuenltZS52MS5EZXBsb3ltZW50Eg8KB2FkZHJlc3MYAiABKAkSLAoIY3VycmVuY3kYAyABKA4yGi5lbnp5bWUuZW56eW1lLnYxLkN1cnJlbmN5EisKBXJhbmdlGAQgASgLMhwuZW56eW1lLmVuenltZS52MS5UaW1lV2luZG93EjAKCnJlc29sdXRpb24YBSABKA4yHC5lbnp5bWUuZW56eW1lLnYxLlJlc29sdXRpb24iUgoaR2V0VmF1bHRUaW1lU2VyaWVzUmVzcG9uc2USNAoFaXRlbXMYASADKAsyJS5lbnp5bWUuZW56eW1lLnYxLlZhdWx0VGltZVNlcmllc0l0ZW0iggEKD0dldFZhdWx0UmVxdWVzdBIwCgpkZXBsb3ltZW50GAEgASgOMhwuZW56eW1lLmVuenltZS52MS5EZXBsb3ltZW50Eg8KB2FkZHJlc3MYAiABKAkSLAoIY3VycmVuY3kYAyABKA4yGi5lbnp5bWUuZW56eW1lLnYxLkN1cnJlbmN5ItACChBHZXRWYXVsdFJlc3BvbnNlEg8KB2FkZHJlc3MYASABKAkSDAoEbmFtZRgCIAEoCRIOCgZzeW1ib2wYAyABKAkSDQoFb3duZXIYBCABKAkSEwoLY29tcHRyb2xsZXIYBSABKAkSLQoJaW5jZXB0aW9uGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgd0YWdsaW5lGAcgASgJEhMKC2Rlc2NyaXB0aW9uGAggASgJEhsKE21hbmFnZXJfZGVzY3JpcHRpb24YCSABKAkSFAoMZGVub21pbmF0aW9uGAogASgJEhkKEWdyb3NzX2Fzc2V0X3ZhbHVlGBQgASgCEhcKD25ldF9hc3NldF92YWx1ZRgVIAEoAhITCgtzaGFyZV9wcmljZRgWIAEoAhIYChBudW1iZXJfb2Zfc2hhcmVzGBcgASgCIowBChlHZXRWYXVsdEFjdGl2aXRpZXNSZXF1ZXN0EjAKCmRlcGxveW1lbnQYASABKA4yHC5lbnp5bWUuZW56eW1lLnYxLkRlcGxveW1lbnQSDwoHYWRkcmVzcxgCIAEoCRIsCghjdXJyZW5jeRgDIAEoDjIaLmVuenltZS5lbnp5bWUudjEuQ3VycmVuY3kiWQoaR2V0VmF1bHRBY3Rpdml0aWVzUmVzcG9uc2USOwoQdmF1bHRfYWN0aXZpdGllcxgBIAMoCzIhLmVuenltZS5lbnp5bWUudjEuVmF1bHRBY3Rpdml0aWVzMsYKCg1Fbnp5bWVTZXJ2aWNlEl0KDEdldEFzc2V0TGlzdBIlLmVuenltZS5lbnp5bWUudjEuR2V0QXNzZXRMaXN0UmVxdWVzdBomLmVuenltZS5lbnp5bWUudjEuR2V0QXNzZXRMaXN0UmVzcG9uc2USXQoMR2V0VmF1bHRMaXN0EiUuZW56eW1lLmVuenltZS52MS5HZXRWYXVsdExpc3RSZXF1ZXN0GiYuZW56eW1lLmVuenltZS52MS5HZXRWYXVsdExpc3RSZXNwb25zZRJRCghHZXRWYXVsdBIhLmVuenltZS5lbnp5bWUudjEuR2V0VmF1bHRSZXF1ZXN0GiIuZW56eW1lLmVuenltZS52MS5HZXRWYXVsdFJlc3BvbnNlEm8KEkdldFZhdWx0QWN0aXZpdGllcxIrLmVuenltZS5lbnp5bWUudjEuR2V0VmF1bHRBY3Rpdml0aWVzUmVxdWVzdBosLmVuenltZS5lbnp5bWUudjEuR2V0VmF1bHRBY3Rpdml0aWVzUmVzcG9uc2USbwoSR2V0VmF1bHREZXBvc2l0b3JzEisuZW56eW1lLmVuenltZS52MS5HZXRWYXVsdERlcG9zaXRvcnNSZXF1ZXN0GiwuZW56eW1lLmVuenltZS52MS5HZXRWYXVsdERlcG9zaXRvcnNSZXNwb25zZRJsChFHZXRWYXVsdFBvcnRmb2xpbxIqLmVuenltZS5lbnp5bWUudjEuR2V0VmF1bHRQb3J0Zm9saW9SZXF1ZXN0GisuZW56eW1lLmVuenltZS52MS5HZXRWYXVsdFBvcnRmb2xpb1Jlc3BvbnNlEngKFUdldFZhdWx0Q29uZmlndXJhdGlvbhIuLmVuenltZS5lbnp5bWUudjEuR2V0VmF1bHRDb25maWd1cmF0aW9uUmVxdWVzdBovLmVuenltZS5lbnp5bWUudjEuR2V0VmF1bHRDb25maWd1cmF0aW9uUmVzcG9uc2USbwoSR2V0VmF1bHRUaW1lU2VyaWVzEisuZW56eW1lLmVuenltZS52MS5HZXRWYXVsdFRpbWVTZXJpZXNSZXF1ZXN0GiwuZW56eW1lLmVuenltZS52MS5HZXRWYXVsdFRpbWVTZXJpZXNSZXNwb25zZRJ1ChRHZXRNYW5hZ2VyVGltZVNlcmllcxItLmVuenltZS5lbnp5bWUudjEuR2V0TWFuYWdlclRpbWVTZXJpZXNSZXF1ZXN0Gi4uZW56eW1lLmVuenltZS52MS5HZXRNYW5hZ2VyVGltZVNlcmllc1Jlc3BvbnNlEnsKFkdldERlcG9zaXRvclRpbWVTZXJpZXMSLy5lbnp5bWUuZW56eW1lLnYxLkdldERlcG9zaXRvclRpbWVTZXJpZXNSZXF1ZXN0GjAuZW56eW1lLmVuenltZS52MS5HZXREZXBvc2l0b3JUaW1lU2VyaWVzUmVzcG9uc2USdQoUR2V0TmV0d29ya1RpbWVTZXJpZXMSLS5lbnp5bWUuZW56eW1lLnYxLkdldE5ldHdvcmtUaW1lU2VyaWVzUmVxdWVzdBouLmVuenltZS5lbnp5bWUudjEuR2V0TmV0d29ya1RpbWVTZXJpZXNSZXNwb25zZRJ+ChdHZXROZXR3b3JrRmVlU3RhdGlzdGljcxIwLmVuenltZS5lbnp5bWUudjEuR2V0TmV0d29ya0ZlZVN0YXRpc3RpY3NSZXF1ZXN0GjEuZW56eW1lLmVuenltZS52MS5HZXROZXR3b3JrRmVlU3RhdGlzdGljc1Jlc3BvbnNlQoUBChRjb20uZW56eW1lLmVuenltZS52MUILRW56eW1lUHJvdG9QAaICA0VFWKoCEEVuenltZS5Fbnp5bWUuVjHKAhBFbnp5bWVcRW56eW1lXFYx4gIcRW56eW1lXEVuenltZVxWMVxHUEJNZXRhZGF0YeoCEkVuenltZTo6RW56eW1lOjpWMWIGcHJvdG8z", [file_enzyme_enzyme_v1_asset_item, file_enzyme_enzyme_v1_depositor_item, file_enzyme_enzyme_v1_depositor_time_series_item, file_enzyme_enzyme_v1_enums, file_enzyme_enzyme_v1_external_position_item, file_enzyme_enzyme_v1_fee_configuration, file_enzyme_enzyme_v1_manager_time_series_item, file_enzyme_enzyme_v1_network_time_series_item, file_enzyme_enzyme_v1_policy_configuration, file_enzyme_enzyme_v1_portfolio_asset_item, file_enzyme_enzyme_v1_time_window, file_enzyme_enzyme_v1_vault_activities, file_enzyme_enzyme_v1_vault_list_item, file_enzyme_enzyme_v1_vault_time_series_item, file_google_protobuf_timestamp]);

/**
 * GetAssetListRequest contains the input parameters for the GetAssetList endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetAssetListRequest
 */
export type GetAssetListRequest = Message<"enzyme.enzyme.v1.GetAssetListRequest"> & {
  /**
   * Request the asset list for a specific deployment
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 2;
   */
  currency: Currency;
};

/**
 * Describes the message enzyme.enzyme.v1.GetAssetListRequest.
 * Use `create(GetAssetListRequestSchema)` to create a new message.
 */
export const GetAssetListRequestSchema: GenMessage<GetAssetListRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 0);

/**
 * GetAssetListResponse contains the output parameters for the GetAssetList endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetAssetListResponse
 */
export type GetAssetListResponse = Message<"enzyme.enzyme.v1.GetAssetListResponse"> & {
  /**
   * Number of assets
   *
   * @generated from field: uint32 number_of_assets = 1;
   */
  numberOfAssets: number;

  /**
   * List of assets with details on each asset
   *
   * @generated from field: repeated enzyme.enzyme.v1.AssetItem assets = 2;
   */
  assets: AssetItem[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetAssetListResponse.
 * Use `create(GetAssetListResponseSchema)` to create a new message.
 */
export const GetAssetListResponseSchema: GenMessage<GetAssetListResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 1);

/**
 * GetDepositorTimeSeriesRequest contains the input parameters for the GetDepositorTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetDepositorTimeSeriesRequest
 */
export type GetDepositorTimeSeriesRequest = Message<"enzyme.enzyme.v1.GetDepositorTimeSeriesRequest"> & {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The addresses of the depositors
   *
   * @generated from field: repeated string depositor_addresses = 2;
   */
  depositorAddresses: string[];

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 3;
   */
  currency: Currency;

  /**
   * The time range (from/to) of the time series
   *
   * @generated from field: enzyme.enzyme.v1.TimeWindow range = 4;
   */
  range?: TimeWindow;

  /**
   * The time resolution of the time series
   *
   * @generated from field: enzyme.enzyme.v1.Resolution resolution = 5;
   */
  resolution: Resolution;
};

/**
 * Describes the message enzyme.enzyme.v1.GetDepositorTimeSeriesRequest.
 * Use `create(GetDepositorTimeSeriesRequestSchema)` to create a new message.
 */
export const GetDepositorTimeSeriesRequestSchema: GenMessage<GetDepositorTimeSeriesRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 2);

/**
 * GetDepositorTimeSeriesResponse contains the output parameters for the GetDepositorTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetDepositorTimeSeriesResponse
 */
export type GetDepositorTimeSeriesResponse = Message<"enzyme.enzyme.v1.GetDepositorTimeSeriesResponse"> & {
  /**
   * The time series data for the depositor
   *
   * @generated from field: repeated enzyme.enzyme.v1.DepositorTimeSeriesItem items = 1;
   */
  items: DepositorTimeSeriesItem[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetDepositorTimeSeriesResponse.
 * Use `create(GetDepositorTimeSeriesResponseSchema)` to create a new message.
 */
export const GetDepositorTimeSeriesResponseSchema: GenMessage<GetDepositorTimeSeriesResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 3);

/**
 * GetManagerTimeSeriesRequest contains the input parameters for the GetManagerTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetManagerTimeSeriesRequest
 */
export type GetManagerTimeSeriesRequest = Message<"enzyme.enzyme.v1.GetManagerTimeSeriesRequest"> & {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The addresses of the vaults
   *
   * @generated from field: repeated string vault_addresses = 2;
   */
  vaultAddresses: string[];

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 3;
   */
  currency: Currency;

  /**
   * The time range (from/to) of the time series
   *
   * @generated from field: enzyme.enzyme.v1.TimeWindow range = 4;
   */
  range?: TimeWindow;

  /**
   * The time resolution of the time series
   *
   * @generated from field: enzyme.enzyme.v1.Resolution resolution = 5;
   */
  resolution: Resolution;
};

/**
 * Describes the message enzyme.enzyme.v1.GetManagerTimeSeriesRequest.
 * Use `create(GetManagerTimeSeriesRequestSchema)` to create a new message.
 */
export const GetManagerTimeSeriesRequestSchema: GenMessage<GetManagerTimeSeriesRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 4);

/**
 * GetManagerTimeSeriesResponse contains the output parameters for the GetManagerTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetManagerTimeSeriesResponse
 */
export type GetManagerTimeSeriesResponse = Message<"enzyme.enzyme.v1.GetManagerTimeSeriesResponse"> & {
  /**
   * The time series data for the manager
   *
   * @generated from field: repeated enzyme.enzyme.v1.ManagerTimeSeriesItem items = 1;
   */
  items: ManagerTimeSeriesItem[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetManagerTimeSeriesResponse.
 * Use `create(GetManagerTimeSeriesResponseSchema)` to create a new message.
 */
export const GetManagerTimeSeriesResponseSchema: GenMessage<GetManagerTimeSeriesResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 5);

/**
 * GetNetworkFeeStatisticsRequest contains the input parameters for the GetNetworkFeeStatistics endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetNetworkFeeStatisticsRequest
 */
export type GetNetworkFeeStatisticsRequest = Message<"enzyme.enzyme.v1.GetNetworkFeeStatisticsRequest"> & {
};

/**
 * Describes the message enzyme.enzyme.v1.GetNetworkFeeStatisticsRequest.
 * Use `create(GetNetworkFeeStatisticsRequestSchema)` to create a new message.
 */
export const GetNetworkFeeStatisticsRequestSchema: GenMessage<GetNetworkFeeStatisticsRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 6);

/**
 * GetNetworkFeeStatisticsResponse contains the output parameters for the GetNetworkFeeStatistics endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetNetworkFeeStatisticsResponse
 */
export type GetNetworkFeeStatisticsResponse = Message<"enzyme.enzyme.v1.GetNetworkFeeStatisticsResponse"> & {
  /**
   * Number of MLN burned to date
   *
   * @generated from field: float mln_burned_to_date = 1;
   */
  mlnBurnedToDate: number;

  /**
   * Network fees collected to date
   *
   * @generated from field: float network_fee_to_date = 2;
   */
  networkFeeToDate: number;

  /**
   * Network fees annualized
   *
   * @generated from field: float network_fee_annualized = 3;
   */
  networkFeeAnnualized: number;
};

/**
 * Describes the message enzyme.enzyme.v1.GetNetworkFeeStatisticsResponse.
 * Use `create(GetNetworkFeeStatisticsResponseSchema)` to create a new message.
 */
export const GetNetworkFeeStatisticsResponseSchema: GenMessage<GetNetworkFeeStatisticsResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 7);

/**
 * GetNetworkTimeSeriesRequest contains the input parameters for the GetNetworkTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetNetworkTimeSeriesRequest
 */
export type GetNetworkTimeSeriesRequest = Message<"enzyme.enzyme.v1.GetNetworkTimeSeriesRequest"> & {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 2;
   */
  currency: Currency;

  /**
   * The time range (from/to) of the time series
   *
   * @generated from field: enzyme.enzyme.v1.TimeWindow range = 3;
   */
  range?: TimeWindow;

  /**
   * The time resolution of the time series
   *
   * @generated from field: enzyme.enzyme.v1.Resolution resolution = 4;
   */
  resolution: Resolution;
};

/**
 * Describes the message enzyme.enzyme.v1.GetNetworkTimeSeriesRequest.
 * Use `create(GetNetworkTimeSeriesRequestSchema)` to create a new message.
 */
export const GetNetworkTimeSeriesRequestSchema: GenMessage<GetNetworkTimeSeriesRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 8);

/**
 * GetNetworkTimeSeriesResponse contains the output parameters for the GetNetworkTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetNetworkTimeSeriesResponse
 */
export type GetNetworkTimeSeriesResponse = Message<"enzyme.enzyme.v1.GetNetworkTimeSeriesResponse"> & {
  /**
   * The time series data for the network
   *
   * @generated from field: repeated enzyme.enzyme.v1.NetworkTimeSeriesItem items = 1;
   */
  items: NetworkTimeSeriesItem[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetNetworkTimeSeriesResponse.
 * Use `create(GetNetworkTimeSeriesResponseSchema)` to create a new message.
 */
export const GetNetworkTimeSeriesResponseSchema: GenMessage<GetNetworkTimeSeriesResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 9);

/**
 * GetVaultConfigurationRequest contains the input parameters for the GetVaultConfiguration endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultConfigurationRequest
 */
export type GetVaultConfigurationRequest = Message<"enzyme.enzyme.v1.GetVaultConfigurationRequest"> & {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 3;
   */
  currency: Currency;
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultConfigurationRequest.
 * Use `create(GetVaultConfigurationRequestSchema)` to create a new message.
 */
export const GetVaultConfigurationRequestSchema: GenMessage<GetVaultConfigurationRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 10);

/**
 * GetVaultConfigurationResponse contains the output parameters for the GetVaultConfiguration endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultConfigurationResponse
 */
export type GetVaultConfigurationResponse = Message<"enzyme.enzyme.v1.GetVaultConfigurationResponse"> & {
  /**
   * @generated from field: string comptroller = 1;
   */
  comptroller: string;

  /**
   * @generated from field: enzyme.enzyme.v1.Release release = 2;
   */
  release: Release;

  /**
   * @generated from field: bool freely_transferable_shares = 3;
   */
  freelyTransferableShares: boolean;

  /**
   * @generated from field: bool auto_protocol_fee_shares_buyback = 4;
   */
  autoProtocolFeeSharesBuyback: boolean;

  /**
   * @generated from field: string gas_relayer = 5;
   */
  gasRelayer: string;

  /**
   * @generated from field: float shares_action_timelock = 6;
   */
  sharesActionTimelock: number;

  /**
   * @generated from field: repeated enzyme.enzyme.v1.FeeConfiguration fee_configurations = 7;
   */
  feeConfigurations: FeeConfiguration[];

  /**
   * @generated from field: repeated enzyme.enzyme.v1.PolicyConfiguration policy_configurations = 8;
   */
  policyConfigurations: PolicyConfiguration[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultConfigurationResponse.
 * Use `create(GetVaultConfigurationResponseSchema)` to create a new message.
 */
export const GetVaultConfigurationResponseSchema: GenMessage<GetVaultConfigurationResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 11);

/**
 * GetVaultDepositorsRequest contains the input parameters for the GetVaultDepositors endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultDepositorsRequest
 */
export type GetVaultDepositorsRequest = Message<"enzyme.enzyme.v1.GetVaultDepositorsRequest"> & {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 3;
   */
  currency: Currency;
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultDepositorsRequest.
 * Use `create(GetVaultDepositorsRequestSchema)` to create a new message.
 */
export const GetVaultDepositorsRequestSchema: GenMessage<GetVaultDepositorsRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 12);

/**
 * GetVaultDepositorsResponse contains the output parameters for the GetVaultDepositors endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultDepositorsResponse
 */
export type GetVaultDepositorsResponse = Message<"enzyme.enzyme.v1.GetVaultDepositorsResponse"> & {
  /**
   * The total number of depositors
   *
   * @generated from field: uint32 number_of_depositors = 1;
   */
  numberOfDepositors: number;

  /**
   * The current number of shares
   *
   * @generated from field: float number_of_shares = 2;
   */
  numberOfShares: number;

  /**
   * The list of depositors, which details on each depositor
   *
   * @generated from field: repeated enzyme.enzyme.v1.DepositorItem depositors = 3;
   */
  depositors: DepositorItem[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultDepositorsResponse.
 * Use `create(GetVaultDepositorsResponseSchema)` to create a new message.
 */
export const GetVaultDepositorsResponseSchema: GenMessage<GetVaultDepositorsResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 13);

/**
 * GetVaultListRequest contains the input parameters for the GetVaultList endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultListRequest
 */
export type GetVaultListRequest = Message<"enzyme.enzyme.v1.GetVaultListRequest"> & {
  /**
   * Request the vault list for a specific deployment
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 2;
   */
  currency: Currency;
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultListRequest.
 * Use `create(GetVaultListRequestSchema)` to create a new message.
 */
export const GetVaultListRequestSchema: GenMessage<GetVaultListRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 14);

/**
 * GetAssetListResponse contains the output parameters for the GetVaultList endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultListResponse
 */
export type GetVaultListResponse = Message<"enzyme.enzyme.v1.GetVaultListResponse"> & {
  /**
   * Then number of vaults
   *
   * @generated from field: uint32 number_of_vaults = 1;
   */
  numberOfVaults: number;

  /**
   * The list of vaults with details on each vault
   *
   * @generated from field: repeated enzyme.enzyme.v1.VaultListItem vaults = 2;
   */
  vaults: VaultListItem[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultListResponse.
 * Use `create(GetVaultListResponseSchema)` to create a new message.
 */
export const GetVaultListResponseSchema: GenMessage<GetVaultListResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 15);

/**
 * GetVaultPortfolioRequest contains the input parameters for the GetVaultPortfolio endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultPortfolioRequest
 */
export type GetVaultPortfolioRequest = Message<"enzyme.enzyme.v1.GetVaultPortfolioRequest"> & {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 3;
   */
  currency: Currency;
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultPortfolioRequest.
 * Use `create(GetVaultPortfolioRequestSchema)` to create a new message.
 */
export const GetVaultPortfolioRequestSchema: GenMessage<GetVaultPortfolioRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 16);

/**
 * GetVaultPortfolioResponse contains the output parameters for the GetVaultPortfolio endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultPortfolioResponse
 */
export type GetVaultPortfolioResponse = Message<"enzyme.enzyme.v1.GetVaultPortfolioResponse"> & {
  /**
   * The list of indidvidual ERC20 assets currently held by the vault, with details
   *
   * @generated from field: repeated enzyme.enzyme.v1.PortfolioAssetItem assets = 1;
   */
  assets: PortfolioAssetItem[];

  /**
   * The list of individual external positioins currently held by the vault, with details
   *
   * @generated from field: repeated enzyme.enzyme.v1.ExternalPositionItem external_positions = 2;
   */
  externalPositions: ExternalPositionItem[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultPortfolioResponse.
 * Use `create(GetVaultPortfolioResponseSchema)` to create a new message.
 */
export const GetVaultPortfolioResponseSchema: GenMessage<GetVaultPortfolioResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 17);

/**
 * GetVaultTimeSeriesRequest contains the input parameters for the GetVaultTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultTimeSeriesRequest
 */
export type GetVaultTimeSeriesRequest = Message<"enzyme.enzyme.v1.GetVaultTimeSeriesRequest"> & {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 3;
   */
  currency: Currency;

  /**
   * The time range (from/to) of the time series
   *
   * @generated from field: enzyme.enzyme.v1.TimeWindow range = 4;
   */
  range?: TimeWindow;

  /**
   * The time resolution of the time series
   *
   * @generated from field: enzyme.enzyme.v1.Resolution resolution = 5;
   */
  resolution: Resolution;
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultTimeSeriesRequest.
 * Use `create(GetVaultTimeSeriesRequestSchema)` to create a new message.
 */
export const GetVaultTimeSeriesRequestSchema: GenMessage<GetVaultTimeSeriesRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 18);

/**
 * GetVaultTimeSeriesResponse contains the output parameters for the GetVaultTimeSeries endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultTimeSeriesResponse
 */
export type GetVaultTimeSeriesResponse = Message<"enzyme.enzyme.v1.GetVaultTimeSeriesResponse"> & {
  /**
   * The time series data of the vault
   *
   * @generated from field: repeated enzyme.enzyme.v1.VaultTimeSeriesItem items = 1;
   */
  items: VaultTimeSeriesItem[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultTimeSeriesResponse.
 * Use `create(GetVaultTimeSeriesResponseSchema)` to create a new message.
 */
export const GetVaultTimeSeriesResponseSchema: GenMessage<GetVaultTimeSeriesResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 19);

/**
 * GetVaultRequest contains the input parameters for the GetVault endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultRequest
 */
export type GetVaultRequest = Message<"enzyme.enzyme.v1.GetVaultRequest"> & {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 3;
   */
  currency: Currency;
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultRequest.
 * Use `create(GetVaultRequestSchema)` to create a new message.
 */
export const GetVaultRequestSchema: GenMessage<GetVaultRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 20);

/**
 * GetVaultResponse contains the output parameters for the GetVault endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultResponse
 */
export type GetVaultResponse = Message<"enzyme.enzyme.v1.GetVaultResponse"> & {
  /**
   * Vault address
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * Vault name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Vault symbol
   *
   * @generated from field: string symbol = 3;
   */
  symbol: string;

  /**
   * Owner/manager wallet address
   *
   * @generated from field: string owner = 4;
   */
  owner: string;

  /**
   * Address of the vault comptroller contract
   *
   * @generated from field: string comptroller = 5;
   */
  comptroller: string;

  /**
   * Inception timestamp of the vault
   *
   * @generated from field: google.protobuf.Timestamp inception = 6;
   */
  inception?: Timestamp;

  /**
   * The tagline of the vault
   *
   * @generated from field: string tagline = 7;
   */
  tagline: string;

  /**
   * The description fo the vault
   *
   * @generated from field: string description = 8;
   */
  description: string;

  /**
   * The description of the vault manager
   *
   * @generated from field: string manager_description = 9;
   */
  managerDescription: string;

  /**
   * The symbol of the vault denomination asset
   *
   * @generated from field: string denomination = 10;
   */
  denomination: string;

  /**
   * The current gross asset value of the vault
   *
   * @generated from field: float gross_asset_value = 20;
   */
  grossAssetValue: number;

  /**
   * The current net asset value of the vault
   *
   * @generated from field: float net_asset_value = 21;
   */
  netAssetValue: number;

  /**
   * The current share price of the vault
   *
   * @generated from field: float share_price = 22;
   */
  sharePrice: number;

  /**
   * The current number of shares
   *
   * @generated from field: float number_of_shares = 23;
   */
  numberOfShares: number;
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultResponse.
 * Use `create(GetVaultResponseSchema)` to create a new message.
 */
export const GetVaultResponseSchema: GenMessage<GetVaultResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 21);

/**
 * GetVaultActivitiesRequest contains the input parameters for the GetVaultActivities endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultActivitiesRequest
 */
export type GetVaultActivitiesRequest = Message<"enzyme.enzyme.v1.GetVaultActivitiesRequest"> & {
  /**
   * The deployment of the vault
   *
   * @generated from field: enzyme.enzyme.v1.Deployment deployment = 1;
   */
  deployment: Deployment;

  /**
   * The address of the vault
   *
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * The currency in which all amounts and prices are displayed.
   *
   * @generated from field: enzyme.enzyme.v1.Currency currency = 3;
   */
  currency: Currency;
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultActivitiesRequest.
 * Use `create(GetVaultActivitiesRequestSchema)` to create a new message.
 */
export const GetVaultActivitiesRequestSchema: GenMessage<GetVaultActivitiesRequest> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 22);

/**
 * GetVaultActivitiesResponse contains the output parameters for the GetVaultActivity endpoint 
 *
 * @generated from message enzyme.enzyme.v1.GetVaultActivitiesResponse
 */
export type GetVaultActivitiesResponse = Message<"enzyme.enzyme.v1.GetVaultActivitiesResponse"> & {
  /**
   * @generated from field: repeated enzyme.enzyme.v1.VaultActivities vault_activities = 1;
   */
  vaultActivities: VaultActivities[];
};

/**
 * Describes the message enzyme.enzyme.v1.GetVaultActivitiesResponse.
 * Use `create(GetVaultActivitiesResponseSchema)` to create a new message.
 */
export const GetVaultActivitiesResponseSchema: GenMessage<GetVaultActivitiesResponse> = /*@__PURE__*/
  messageDesc(file_enzyme_enzyme_v1_enzyme, 23);

/**
 * The Enzyme Service contains different endpoints:
 *   a) network-wide information,
 *   b) vault-specific information,
 *   c) wallet-specific information
 *
 *
 * @generated from service enzyme.enzyme.v1.EnzymeService
 */
export const EnzymeService: GenService<{
  /**
   *
   * List all assets in the Enzyme Protocol universe. Apart from static asset data,
   * like address, name and symbol, it also lists the current asset price.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetAssetList
   */
  getAssetList: {
    methodKind: "unary";
    input: typeof GetAssetListRequestSchema;
    output: typeof GetAssetListResponseSchema;
  },
  /**
   *
   * List all vaults in the Enzyme Protocol universe.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetVaultList
   */
  getVaultList: {
    methodKind: "unary";
    input: typeof GetVaultListRequestSchema;
    output: typeof GetVaultListResponseSchema;
  },
  /**
   *
   * Basic details about an individual vault.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetVault
   */
  getVault: {
    methodKind: "unary";
    input: typeof GetVaultRequestSchema;
    output: typeof GetVaultResponseSchema;
  },
  /**
   *
   * Basic details about an individual vaults activities.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetVaultActivities
   */
  getVaultActivities: {
    methodKind: "unary";
    input: typeof GetVaultActivitiesRequestSchema;
    output: typeof GetVaultActivitiesResponseSchema;
  },
  /**
   *
   * The list of depositors for an individual vault.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetVaultDepositors
   */
  getVaultDepositors: {
    methodKind: "unary";
    input: typeof GetVaultDepositorsRequestSchema;
    output: typeof GetVaultDepositorsResponseSchema;
  },
  /**
   *
   * Portfolio details for an individual vault.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetVaultPortfolio
   */
  getVaultPortfolio: {
    methodKind: "unary";
    input: typeof GetVaultPortfolioRequestSchema;
    output: typeof GetVaultPortfolioResponseSchema;
  },
  /**
   *
   * Configuration details for an individual vault.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetVaultConfiguration
   */
  getVaultConfiguration: {
    methodKind: "unary";
    input: typeof GetVaultConfigurationRequestSchema;
    output: typeof GetVaultConfigurationResponseSchema;
  },
  /**
   *
   * Time series for a vault, e.g. share price, net asset value.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetVaultTimeSeries
   */
  getVaultTimeSeries: {
    methodKind: "unary";
    input: typeof GetVaultTimeSeriesRequestSchema;
    output: typeof GetVaultTimeSeriesResponseSchema;
  },
  /**
   *
   * Time series for a specific manager, e.g. share price, gross asset value.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetManagerTimeSeries
   */
  getManagerTimeSeries: {
    methodKind: "unary";
    input: typeof GetManagerTimeSeriesRequestSchema;
    output: typeof GetManagerTimeSeriesResponseSchema;
  },
  /**
   *
   * Time series for a specific depositor, e.g. share price, net asset value.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetDepositorTimeSeries
   */
  getDepositorTimeSeries: {
    methodKind: "unary";
    input: typeof GetDepositorTimeSeriesRequestSchema;
    output: typeof GetDepositorTimeSeriesResponseSchema;
  },
  /**
   *
   * Time series for the Enzyme network, e.g. total assets under management, number of vaults.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetNetworkTimeSeries
   */
  getNetworkTimeSeries: {
    methodKind: "unary";
    input: typeof GetNetworkTimeSeriesRequestSchema;
    output: typeof GetNetworkTimeSeriesResponseSchema;
  },
  /**
   *
   * Statistics about the collected network fees.
   *
   * @generated from rpc enzyme.enzyme.v1.EnzymeService.GetNetworkFeeStatistics
   */
  getNetworkFeeStatistics: {
    methodKind: "unary";
    input: typeof GetNetworkFeeStatisticsRequestSchema;
    output: typeof GetNetworkFeeStatisticsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_enzyme_enzyme_v1_enzyme, 0);


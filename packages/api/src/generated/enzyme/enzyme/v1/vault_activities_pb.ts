// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file enzyme/enzyme/v1/vault_activities.proto (package enzyme.enzyme.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ActivityCategory } from "./enums_pb.js";
import { AssetAmount } from "./asset_amount_pb.js";

/**
 * @generated from message enzyme.enzyme.v1.VaultActivities
 */
export class VaultActivities extends Message<VaultActivities> {
  /**
   * @generated from oneof enzyme.enzyme.v1.VaultActivities.vaultActivity
   */
  vaultActivity: {
    /**
     * @generated from field: enzyme.enzyme.v1.AaveDebtPositionChange aave_debt_position_change = 1;
     */
    value: AaveDebtPositionChange;
    case: "aaveDebtPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.ArbitraryLoanPositionChange arbitrary_loan_position_change = 2;
     */
    value: ArbitraryLoanPositionChange;
    case: "arbitraryLoanPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.CompoundDebtPositionChange compound_debt_position_change = 3;
     */
    value: CompoundDebtPositionChange;
    case: "compoundDebtPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.ConvexVotingPositionChange convex_voting_position_change = 4;
     */
    value: ConvexVotingPositionChange;
    case: "convexVotingPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.ExternalPositionAddedEvent external_position_added_event = 5;
     */
    value: ExternalPositionAddedEvent;
    case: "externalPositionAddedEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.ExternalPositionRemovedEvent external_position_removed_event = 6;
     */
    value: ExternalPositionRemovedEvent;
    case: "externalPositionRemovedEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.FeeSharesAllocationChangedEvent fee_shares_allocation_changed_event = 7;
     */
    value: FeeSharesAllocationChangedEvent;
    case: "feeSharesAllocationChangedEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.FeeSharesBurnedEvent fee_shares_burned_event = 8;
     */
    value: FeeSharesBurnedEvent;
    case: "feeSharesBurnedEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.FeeSharesPaidEvent fee_shares_paid_event = 9;
     */
    value: FeeSharesPaidEvent;
    case: "feeSharesPaidEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.FeeSharesReceivedEvent fee_shares_received_event = 10;
     */
    value: FeeSharesReceivedEvent;
    case: "feeSharesReceivedEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.FreelyTransferableSharesSetEvent freely_transferable_shares_set_event = 11;
     */
    value: FreelyTransferableSharesSetEvent;
    case: "freelyTransferableSharesSetEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.GasRelayerDeposited gas_relayer_deposited = 12;
     */
    value: GasRelayerDeposited;
    case: "gasRelayerDeposited";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.GasRelayerWithdrawn gas_relayer_withdrawn = 13;
     */
    value: GasRelayerWithdrawn;
    case: "gasRelayerWithdrawn";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.KilnStakingPositionChange kiln_staking_position_change = 14;
     */
    value: KilnStakingPositionChange;
    case: "kilnStakingPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.LiquityDebtPositionChange liquity_debt_position_change = 15;
     */
    value: LiquityDebtPositionChange;
    case: "liquityDebtPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.MapleLiquidityPositionChange maple_liquidity_position_change = 16;
     */
    value: MapleLiquidityPositionChange;
    case: "mapleLiquidityPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.PolicyDisabledForVault policy_disabled_for_vault = 17;
     */
    value: PolicyDisabledForVault;
    case: "policyDisabledForVault";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.PolicyEnabledForVault policy_enabled_for_vault = 18;
     */
    value: PolicyEnabledForVault;
    case: "policyEnabledForVault";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.PricelessAssetBypass priceless_asset_bypass = 19;
     */
    value: PricelessAssetBypass;
    case: "pricelessAssetBypass";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.PricelessAssetTimelock priceless_asset_timelock = 20;
     */
    value: PricelessAssetTimelock;
    case: "pricelessAssetTimelock";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.ProtocolFeeBurned protocol_fee_burned = 21;
     */
    value: ProtocolFeeBurned;
    case: "protocolFeeBurned";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.ProtocolFeePaid protocol_fee_paid = 22;
     */
    value: ProtocolFeePaid;
    case: "protocolFeePaid";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.SharesBoughtEvent shares_bought_event = 23;
     */
    value: SharesBoughtEvent;
    case: "sharesBoughtEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.SharesRedeemedEvent shares_redeemed_event = 24;
     */
    value: SharesRedeemedEvent;
    case: "sharesRedeemedEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.SharesTransferEvent shares_transfer_event = 25;
     */
    value: SharesTransferEvent;
    case: "sharesTransferEvent";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.TheGraphDelegationPositionChange the_graph_delegation_position_change = 26;
     */
    value: TheGraphDelegationPositionChange;
    case: "theGraphDelegationPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.Trade trade = 27;
     */
    value: Trade;
    case: "trade";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.UniswapV3LiquidityPositionChange uniswap_v3_liquidity_position_change = 28;
     */
    value: UniswapV3LiquidityPositionChange;
    case: "uniswapV3LiquidityPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.UnknownExternalPositionChange unknown_external_position_change = 29;
     */
    value: UnknownExternalPositionChange;
    case: "unknownExternalPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultCreated vault_created = 30;
     */
    value: VaultCreated;
    case: "vaultCreated";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultMigrationCancelled vault_migration_cancelled = 31;
     */
    value: VaultMigrationCancelled;
    case: "vaultMigrationCancelled";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultMigrationExecuted vault_migration_executed = 32;
     */
    value: VaultMigrationExecuted;
    case: "vaultMigrationExecuted";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultMigrationSignalled vault_migration_signalled = 33;
     */
    value: VaultMigrationSignalled;
    case: "vaultMigrationSignalled";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultNominatedOwnerRemoved vault_nominated_owner_removed = 34;
     */
    value: VaultNominatedOwnerRemoved;
    case: "vaultNominatedOwnerRemoved";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultNominatedOwnerSet vault_nominated_owner_set = 35;
     */
    value: VaultNominatedOwnerSet;
    case: "vaultNominatedOwnerSet";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultOwnershipTransferred vault_ownership_transferred = 36;
     */
    value: VaultOwnershipTransferred;
    case: "vaultOwnershipTransferred";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultReconfigurationCancelled vault_reconfiguration_cancelled = 37;
     */
    value: VaultReconfigurationCancelled;
    case: "vaultReconfigurationCancelled";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultReconfigurationExecuted vault_reconfiguration_executed = 38;
     */
    value: VaultReconfigurationExecuted;
    case: "vaultReconfigurationExecuted";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.VaultReconfigurationSignalled vault_reconfiguration_signalled = 39;
     */
    value: VaultReconfigurationSignalled;
    case: "vaultReconfigurationSignalled";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.AaveV3DebtPositionChange aave_v3_debt_position_change = 40;
     */
    value: AaveV3DebtPositionChange;
    case: "aaveV3DebtPositionChange";
  } | {
    /**
     * @generated from field: enzyme.enzyme.v1.LidoWithdrawalsPositionChange lido_withdrawals_position_change = 41;
     */
    value: LidoWithdrawalsPositionChange;
    case: "lidoWithdrawalsPositionChange";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<VaultActivities>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultActivities";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "aave_debt_position_change", kind: "message", T: AaveDebtPositionChange, oneof: "vaultActivity" },
    { no: 2, name: "arbitrary_loan_position_change", kind: "message", T: ArbitraryLoanPositionChange, oneof: "vaultActivity" },
    { no: 3, name: "compound_debt_position_change", kind: "message", T: CompoundDebtPositionChange, oneof: "vaultActivity" },
    { no: 4, name: "convex_voting_position_change", kind: "message", T: ConvexVotingPositionChange, oneof: "vaultActivity" },
    { no: 5, name: "external_position_added_event", kind: "message", T: ExternalPositionAddedEvent, oneof: "vaultActivity" },
    { no: 6, name: "external_position_removed_event", kind: "message", T: ExternalPositionRemovedEvent, oneof: "vaultActivity" },
    { no: 7, name: "fee_shares_allocation_changed_event", kind: "message", T: FeeSharesAllocationChangedEvent, oneof: "vaultActivity" },
    { no: 8, name: "fee_shares_burned_event", kind: "message", T: FeeSharesBurnedEvent, oneof: "vaultActivity" },
    { no: 9, name: "fee_shares_paid_event", kind: "message", T: FeeSharesPaidEvent, oneof: "vaultActivity" },
    { no: 10, name: "fee_shares_received_event", kind: "message", T: FeeSharesReceivedEvent, oneof: "vaultActivity" },
    { no: 11, name: "freely_transferable_shares_set_event", kind: "message", T: FreelyTransferableSharesSetEvent, oneof: "vaultActivity" },
    { no: 12, name: "gas_relayer_deposited", kind: "message", T: GasRelayerDeposited, oneof: "vaultActivity" },
    { no: 13, name: "gas_relayer_withdrawn", kind: "message", T: GasRelayerWithdrawn, oneof: "vaultActivity" },
    { no: 14, name: "kiln_staking_position_change", kind: "message", T: KilnStakingPositionChange, oneof: "vaultActivity" },
    { no: 15, name: "liquity_debt_position_change", kind: "message", T: LiquityDebtPositionChange, oneof: "vaultActivity" },
    { no: 16, name: "maple_liquidity_position_change", kind: "message", T: MapleLiquidityPositionChange, oneof: "vaultActivity" },
    { no: 17, name: "policy_disabled_for_vault", kind: "message", T: PolicyDisabledForVault, oneof: "vaultActivity" },
    { no: 18, name: "policy_enabled_for_vault", kind: "message", T: PolicyEnabledForVault, oneof: "vaultActivity" },
    { no: 19, name: "priceless_asset_bypass", kind: "message", T: PricelessAssetBypass, oneof: "vaultActivity" },
    { no: 20, name: "priceless_asset_timelock", kind: "message", T: PricelessAssetTimelock, oneof: "vaultActivity" },
    { no: 21, name: "protocol_fee_burned", kind: "message", T: ProtocolFeeBurned, oneof: "vaultActivity" },
    { no: 22, name: "protocol_fee_paid", kind: "message", T: ProtocolFeePaid, oneof: "vaultActivity" },
    { no: 23, name: "shares_bought_event", kind: "message", T: SharesBoughtEvent, oneof: "vaultActivity" },
    { no: 24, name: "shares_redeemed_event", kind: "message", T: SharesRedeemedEvent, oneof: "vaultActivity" },
    { no: 25, name: "shares_transfer_event", kind: "message", T: SharesTransferEvent, oneof: "vaultActivity" },
    { no: 26, name: "the_graph_delegation_position_change", kind: "message", T: TheGraphDelegationPositionChange, oneof: "vaultActivity" },
    { no: 27, name: "trade", kind: "message", T: Trade, oneof: "vaultActivity" },
    { no: 28, name: "uniswap_v3_liquidity_position_change", kind: "message", T: UniswapV3LiquidityPositionChange, oneof: "vaultActivity" },
    { no: 29, name: "unknown_external_position_change", kind: "message", T: UnknownExternalPositionChange, oneof: "vaultActivity" },
    { no: 30, name: "vault_created", kind: "message", T: VaultCreated, oneof: "vaultActivity" },
    { no: 31, name: "vault_migration_cancelled", kind: "message", T: VaultMigrationCancelled, oneof: "vaultActivity" },
    { no: 32, name: "vault_migration_executed", kind: "message", T: VaultMigrationExecuted, oneof: "vaultActivity" },
    { no: 33, name: "vault_migration_signalled", kind: "message", T: VaultMigrationSignalled, oneof: "vaultActivity" },
    { no: 34, name: "vault_nominated_owner_removed", kind: "message", T: VaultNominatedOwnerRemoved, oneof: "vaultActivity" },
    { no: 35, name: "vault_nominated_owner_set", kind: "message", T: VaultNominatedOwnerSet, oneof: "vaultActivity" },
    { no: 36, name: "vault_ownership_transferred", kind: "message", T: VaultOwnershipTransferred, oneof: "vaultActivity" },
    { no: 37, name: "vault_reconfiguration_cancelled", kind: "message", T: VaultReconfigurationCancelled, oneof: "vaultActivity" },
    { no: 38, name: "vault_reconfiguration_executed", kind: "message", T: VaultReconfigurationExecuted, oneof: "vaultActivity" },
    { no: 39, name: "vault_reconfiguration_signalled", kind: "message", T: VaultReconfigurationSignalled, oneof: "vaultActivity" },
    { no: 40, name: "aave_v3_debt_position_change", kind: "message", T: AaveV3DebtPositionChange, oneof: "vaultActivity" },
    { no: 41, name: "lido_withdrawals_position_change", kind: "message", T: LidoWithdrawalsPositionChange, oneof: "vaultActivity" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultActivities {
    return new VaultActivities().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultActivities {
    return new VaultActivities().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultActivities {
    return new VaultActivities().fromJsonString(jsonString, options);
  }

  static equals(a: VaultActivities | PlainMessage<VaultActivities> | undefined, b: VaultActivities | PlainMessage<VaultActivities> | undefined): boolean {
    return proto3.util.equals(VaultActivities, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ActivityPerformanceFee
 */
export class ActivityPerformanceFee extends Message<ActivityPerformanceFee> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string fee_type = 2;
   */
  feeType = "";

  /**
   * @generated from field: string rate = 3;
   */
  rate = "";

  /**
   * @generated from field: float period = 4;
   */
  period = 0;

  constructor(data?: PartialMessage<ActivityPerformanceFee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ActivityPerformanceFee";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fee_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "period", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityPerformanceFee {
    return new ActivityPerformanceFee().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityPerformanceFee {
    return new ActivityPerformanceFee().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityPerformanceFee {
    return new ActivityPerformanceFee().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityPerformanceFee | PlainMessage<ActivityPerformanceFee> | undefined, b: ActivityPerformanceFee | PlainMessage<ActivityPerformanceFee> | undefined): boolean {
    return proto3.util.equals(ActivityPerformanceFee, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ActivityFee
 */
export class ActivityFee extends Message<ActivityFee> {
  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: string fee_type = 3;
   */
  feeType = "";

  constructor(data?: PartialMessage<ActivityFee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ActivityFee";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fee_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityFee {
    return new ActivityFee().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityFee {
    return new ActivityFee().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityFee {
    return new ActivityFee().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityFee | PlainMessage<ActivityFee> | undefined, b: ActivityFee | PlainMessage<ActivityFee> | undefined): boolean {
    return proto3.util.equals(ActivityFee, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.AaveDebtPositionChange
 */
export class AaveDebtPositionChange extends Message<AaveDebtPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: repeated enzyme.enzyme.v1.ActivityCategory activity_categories = 4;
   */
  activityCategories: ActivityCategory[] = [];

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount asset_amounts = 5;
   */
  assetAmounts: AssetAmount[] = [];

  /**
   * @generated from field: string external_position = 6;
   */
  externalPosition = "";

  /**
   * @generated from field: string vault = 7;
   */
  vault = "";

  /**
   * @generated from field: string aave_debt_position_change_type = 8;
   */
  aaveDebtPositionChangeType = "";

  constructor(data?: PartialMessage<AaveDebtPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.AaveDebtPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "activity_categories", kind: "enum", T: proto3.getEnumType(ActivityCategory), repeated: true },
    { no: 5, name: "asset_amounts", kind: "message", T: AssetAmount, repeated: true },
    { no: 6, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "aave_debt_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AaveDebtPositionChange {
    return new AaveDebtPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AaveDebtPositionChange {
    return new AaveDebtPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AaveDebtPositionChange {
    return new AaveDebtPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: AaveDebtPositionChange | PlainMessage<AaveDebtPositionChange> | undefined, b: AaveDebtPositionChange | PlainMessage<AaveDebtPositionChange> | undefined): boolean {
    return proto3.util.equals(AaveDebtPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.AaveV3DebtPositionChange
 */
export class AaveV3DebtPositionChange extends Message<AaveV3DebtPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: repeated enzyme.enzyme.v1.ActivityCategory activity_categories = 4;
   */
  activityCategories: ActivityCategory[] = [];

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount asset_amounts = 5;
   */
  assetAmounts: AssetAmount[] = [];

  /**
   * @generated from field: string external_position = 6;
   */
  externalPosition = "";

  /**
   * @generated from field: string vault = 7;
   */
  vault = "";

  /**
   * @generated from field: string aave_v3_debt_position_change_type = 8;
   */
  aaveV3DebtPositionChangeType = "";

  /**
   * @generated from field: int32 e_mode_category_id = 9;
   */
  eModeCategoryId = 0;

  constructor(data?: PartialMessage<AaveV3DebtPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.AaveV3DebtPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "activity_categories", kind: "enum", T: proto3.getEnumType(ActivityCategory), repeated: true },
    { no: 5, name: "asset_amounts", kind: "message", T: AssetAmount, repeated: true },
    { no: 6, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "aave_v3_debt_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "e_mode_category_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AaveV3DebtPositionChange {
    return new AaveV3DebtPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AaveV3DebtPositionChange {
    return new AaveV3DebtPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AaveV3DebtPositionChange {
    return new AaveV3DebtPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: AaveV3DebtPositionChange | PlainMessage<AaveV3DebtPositionChange> | undefined, b: AaveV3DebtPositionChange | PlainMessage<AaveV3DebtPositionChange> | undefined): boolean {
    return proto3.util.equals(AaveV3DebtPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ArbitraryLoanPositionChange
 */
export class ArbitraryLoanPositionChange extends Message<ArbitraryLoanPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount asset_amounts = 4;
   */
  assetAmounts: AssetAmount[] = [];

  /**
   * @generated from field: repeated string assets = 5;
   */
  assets: string[] = [];

  /**
   * @generated from field: string arbitrary_loan_position_change_type = 6;
   */
  arbitraryLoanPositionChangeType = "";

  /**
   * @generated from field: string borrower = 7;
   */
  borrower = "";

  /**
   * @generated from field: string accounting_module = 8;
   */
  accountingModule = "";

  /**
   * @generated from field: string accounting_module_config_data = 9;
   */
  accountingModuleConfigData = "";

  /**
   * @generated from field: string description = 10;
   */
  description = "";

  /**
   * @generated from field: string external_position = 11;
   */
  externalPosition = "";

  /**
   * @generated from field: string vault = 12;
   */
  vault = "";

  constructor(data?: PartialMessage<ArbitraryLoanPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ArbitraryLoanPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset_amounts", kind: "message", T: AssetAmount, repeated: true },
    { no: 5, name: "assets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "arbitrary_loan_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "borrower", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "accounting_module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "accounting_module_config_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArbitraryLoanPositionChange {
    return new ArbitraryLoanPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArbitraryLoanPositionChange {
    return new ArbitraryLoanPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArbitraryLoanPositionChange {
    return new ArbitraryLoanPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: ArbitraryLoanPositionChange | PlainMessage<ArbitraryLoanPositionChange> | undefined, b: ArbitraryLoanPositionChange | PlainMessage<ArbitraryLoanPositionChange> | undefined): boolean {
    return proto3.util.equals(ArbitraryLoanPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.CompoundDebtPositionChange
 */
export class CompoundDebtPositionChange extends Message<CompoundDebtPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount asset_amounts = 4;
   */
  assetAmounts: AssetAmount[] = [];

  /**
   * @generated from field: string compoundDebtPositionChangeType = 5;
   */
  compoundDebtPositionChangeType = "";

  /**
   * @generated from field: string external_position = 6;
   */
  externalPosition = "";

  /**
   * @generated from field: string vault = 7;
   */
  vault = "";

  constructor(data?: PartialMessage<CompoundDebtPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.CompoundDebtPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset_amounts", kind: "message", T: AssetAmount, repeated: true },
    { no: 5, name: "compoundDebtPositionChangeType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompoundDebtPositionChange {
    return new CompoundDebtPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompoundDebtPositionChange {
    return new CompoundDebtPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompoundDebtPositionChange {
    return new CompoundDebtPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: CompoundDebtPositionChange | PlainMessage<CompoundDebtPositionChange> | undefined, b: CompoundDebtPositionChange | PlainMessage<CompoundDebtPositionChange> | undefined): boolean {
    return proto3.util.equals(CompoundDebtPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ConvexVotingPositionChange
 */
export class ConvexVotingPositionChange extends Message<ConvexVotingPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount asset_amounts = 4;
   */
  assetAmounts: AssetAmount[] = [];

  /**
   * @generated from field: repeated string assets = 5;
   */
  assets: string[] = [];

  /**
   * @generated from field: string convex_voting_position_change_type = 6;
   */
  convexVotingPositionChangeType = "";

  /**
   * @generated from field: string external_position = 7;
   */
  externalPosition = "";

  /**
   * @generated from field: string vault = 8;
   */
  vault = "";

  /**
   * @generated from field: string delegate = 9;
   */
  delegate = "";

  constructor(data?: PartialMessage<ConvexVotingPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ConvexVotingPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "asset_amounts", kind: "message", T: AssetAmount, repeated: true },
    { no: 5, name: "assets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "convex_voting_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "delegate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConvexVotingPositionChange {
    return new ConvexVotingPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConvexVotingPositionChange {
    return new ConvexVotingPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConvexVotingPositionChange {
    return new ConvexVotingPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: ConvexVotingPositionChange | PlainMessage<ConvexVotingPositionChange> | undefined, b: ConvexVotingPositionChange | PlainMessage<ConvexVotingPositionChange> | undefined): boolean {
    return proto3.util.equals(ConvexVotingPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ExternalPositionAddedEvent
 */
export class ExternalPositionAddedEvent extends Message<ExternalPositionAddedEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string external_position = 4;
   */
  externalPosition = "";

  /**
   * @generated from field: string vault = 5;
   */
  vault = "";

  constructor(data?: PartialMessage<ExternalPositionAddedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ExternalPositionAddedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalPositionAddedEvent {
    return new ExternalPositionAddedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalPositionAddedEvent {
    return new ExternalPositionAddedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalPositionAddedEvent {
    return new ExternalPositionAddedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ExternalPositionAddedEvent | PlainMessage<ExternalPositionAddedEvent> | undefined, b: ExternalPositionAddedEvent | PlainMessage<ExternalPositionAddedEvent> | undefined): boolean {
    return proto3.util.equals(ExternalPositionAddedEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ExternalPositionRemovedEvent
 */
export class ExternalPositionRemovedEvent extends Message<ExternalPositionRemovedEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string external_position = 4;
   */
  externalPosition = "";

  /**
   * @generated from field: string vault = 5;
   */
  vault = "";

  constructor(data?: PartialMessage<ExternalPositionRemovedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ExternalPositionRemovedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalPositionRemovedEvent {
    return new ExternalPositionRemovedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalPositionRemovedEvent {
    return new ExternalPositionRemovedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalPositionRemovedEvent {
    return new ExternalPositionRemovedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ExternalPositionRemovedEvent | PlainMessage<ExternalPositionRemovedEvent> | undefined, b: ExternalPositionRemovedEvent | PlainMessage<ExternalPositionRemovedEvent> | undefined): boolean {
    return proto3.util.equals(ExternalPositionRemovedEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.FeeSharesAllocationChangedEvent
 */
export class FeeSharesAllocationChangedEvent extends Message<FeeSharesAllocationChangedEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string depositor = 5;
   */
  depositor = "";

  /**
   * @generated from field: string shares = 6;
   */
  shares = "";

  /**
   * @generated from field: string shares_change_type = 7;
   */
  sharesChangeType = "";

  /**
   * @generated from field: enzyme.enzyme.v1.ActivityPerformanceFee fee = 8;
   */
  fee?: ActivityPerformanceFee;

  constructor(data?: PartialMessage<FeeSharesAllocationChangedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.FeeSharesAllocationChangedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "shares_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "fee", kind: "message", T: ActivityPerformanceFee },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeeSharesAllocationChangedEvent {
    return new FeeSharesAllocationChangedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeeSharesAllocationChangedEvent {
    return new FeeSharesAllocationChangedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeeSharesAllocationChangedEvent {
    return new FeeSharesAllocationChangedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FeeSharesAllocationChangedEvent | PlainMessage<FeeSharesAllocationChangedEvent> | undefined, b: FeeSharesAllocationChangedEvent | PlainMessage<FeeSharesAllocationChangedEvent> | undefined): boolean {
    return proto3.util.equals(FeeSharesAllocationChangedEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.FeeSharesBurnedEvent
 */
export class FeeSharesBurnedEvent extends Message<FeeSharesBurnedEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string depositor = 5;
   */
  depositor = "";

  /**
   * @generated from field: string shares = 6;
   */
  shares = "";

  /**
   * @generated from field: string shares_change_type = 7;
   */
  sharesChangeType = "";

  /**
   * @generated from field: enzyme.enzyme.v1.ActivityFee fee = 8;
   */
  fee?: ActivityFee;

  /**
   * @generated from field: string deposit = 9;
   */
  deposit = "";

  constructor(data?: PartialMessage<FeeSharesBurnedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.FeeSharesBurnedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "shares_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "fee", kind: "message", T: ActivityFee },
    { no: 9, name: "deposit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeeSharesBurnedEvent {
    return new FeeSharesBurnedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeeSharesBurnedEvent {
    return new FeeSharesBurnedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeeSharesBurnedEvent {
    return new FeeSharesBurnedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FeeSharesBurnedEvent | PlainMessage<FeeSharesBurnedEvent> | undefined, b: FeeSharesBurnedEvent | PlainMessage<FeeSharesBurnedEvent> | undefined): boolean {
    return proto3.util.equals(FeeSharesBurnedEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.FeeSharesPaidEvent
 */
export class FeeSharesPaidEvent extends Message<FeeSharesPaidEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string depositor = 5;
   */
  depositor = "";

  /**
   * @generated from field: string shares = 6;
   */
  shares = "";

  /**
   * @generated from field: string shares_change_type = 7;
   */
  sharesChangeType = "";

  /**
   * @generated from field: enzyme.enzyme.v1.ActivityFee fee = 8;
   */
  fee?: ActivityFee;

  /**
   * @generated from field: string deposit = 9;
   */
  deposit = "";

  constructor(data?: PartialMessage<FeeSharesPaidEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.FeeSharesPaidEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "shares_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "fee", kind: "message", T: ActivityFee },
    { no: 9, name: "deposit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeeSharesPaidEvent {
    return new FeeSharesPaidEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeeSharesPaidEvent {
    return new FeeSharesPaidEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeeSharesPaidEvent {
    return new FeeSharesPaidEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FeeSharesPaidEvent | PlainMessage<FeeSharesPaidEvent> | undefined, b: FeeSharesPaidEvent | PlainMessage<FeeSharesPaidEvent> | undefined): boolean {
    return proto3.util.equals(FeeSharesPaidEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.FeeSharesReceivedEvent
 */
export class FeeSharesReceivedEvent extends Message<FeeSharesReceivedEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string depositor = 5;
   */
  depositor = "";

  /**
   * @generated from field: string shares = 6;
   */
  shares = "";

  /**
   * @generated from field: string shares_change_type = 7;
   */
  sharesChangeType = "";

  /**
   * @generated from field: enzyme.enzyme.v1.ActivityFee fee = 8;
   */
  fee?: ActivityFee;

  /**
   * @generated from field: string deposit = 9;
   */
  deposit = "";

  constructor(data?: PartialMessage<FeeSharesReceivedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.FeeSharesReceivedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "shares_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "fee", kind: "message", T: ActivityFee },
    { no: 9, name: "deposit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeeSharesReceivedEvent {
    return new FeeSharesReceivedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeeSharesReceivedEvent {
    return new FeeSharesReceivedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeeSharesReceivedEvent {
    return new FeeSharesReceivedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FeeSharesReceivedEvent | PlainMessage<FeeSharesReceivedEvent> | undefined, b: FeeSharesReceivedEvent | PlainMessage<FeeSharesReceivedEvent> | undefined): boolean {
    return proto3.util.equals(FeeSharesReceivedEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.FreelyTransferableSharesSetEvent
 */
export class FreelyTransferableSharesSetEvent extends Message<FreelyTransferableSharesSetEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  constructor(data?: PartialMessage<FreelyTransferableSharesSetEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.FreelyTransferableSharesSetEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FreelyTransferableSharesSetEvent {
    return new FreelyTransferableSharesSetEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FreelyTransferableSharesSetEvent {
    return new FreelyTransferableSharesSetEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FreelyTransferableSharesSetEvent {
    return new FreelyTransferableSharesSetEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FreelyTransferableSharesSetEvent | PlainMessage<FreelyTransferableSharesSetEvent> | undefined, b: FreelyTransferableSharesSetEvent | PlainMessage<FreelyTransferableSharesSetEvent> | undefined): boolean {
    return proto3.util.equals(FreelyTransferableSharesSetEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.GasRelayerDeposited
 */
export class GasRelayerDeposited extends Message<GasRelayerDeposited> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount gas_relayer_asset_amount = 5;
   */
  gasRelayerAssetAmount?: AssetAmount;

  constructor(data?: PartialMessage<GasRelayerDeposited>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.GasRelayerDeposited";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "gas_relayer_asset_amount", kind: "message", T: AssetAmount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GasRelayerDeposited {
    return new GasRelayerDeposited().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GasRelayerDeposited {
    return new GasRelayerDeposited().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GasRelayerDeposited {
    return new GasRelayerDeposited().fromJsonString(jsonString, options);
  }

  static equals(a: GasRelayerDeposited | PlainMessage<GasRelayerDeposited> | undefined, b: GasRelayerDeposited | PlainMessage<GasRelayerDeposited> | undefined): boolean {
    return proto3.util.equals(GasRelayerDeposited, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.GasRelayerWithdrawn
 */
export class GasRelayerWithdrawn extends Message<GasRelayerWithdrawn> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount gas_relayer_asset_amount = 5;
   */
  gasRelayerAssetAmount?: AssetAmount;

  constructor(data?: PartialMessage<GasRelayerWithdrawn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.GasRelayerWithdrawn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "gas_relayer_asset_amount", kind: "message", T: AssetAmount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GasRelayerWithdrawn {
    return new GasRelayerWithdrawn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GasRelayerWithdrawn {
    return new GasRelayerWithdrawn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GasRelayerWithdrawn {
    return new GasRelayerWithdrawn().fromJsonString(jsonString, options);
  }

  static equals(a: GasRelayerWithdrawn | PlainMessage<GasRelayerWithdrawn> | undefined, b: GasRelayerWithdrawn | PlainMessage<GasRelayerWithdrawn> | undefined): boolean {
    return proto3.util.equals(GasRelayerWithdrawn, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.KilnStakingPositionChange
 */
export class KilnStakingPositionChange extends Message<KilnStakingPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string external_position = 5;
   */
  externalPosition = "";

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount asset_amount = 6;
   */
  assetAmount?: AssetAmount;

  /**
   * @generated from field: string claim_type = 7;
   */
  claimType = "";

  /**
   * @generated from field: string kiln_staking_position_change_type = 8;
   */
  kilnStakingPositionChangeType = "";

  /**
   * @generated from field: string staking_contract_address = 9;
   */
  stakingContractAddress = "";

  constructor(data?: PartialMessage<KilnStakingPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.KilnStakingPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "asset_amount", kind: "message", T: AssetAmount },
    { no: 7, name: "claim_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "kiln_staking_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "staking_contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KilnStakingPositionChange {
    return new KilnStakingPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KilnStakingPositionChange {
    return new KilnStakingPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KilnStakingPositionChange {
    return new KilnStakingPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: KilnStakingPositionChange | PlainMessage<KilnStakingPositionChange> | undefined, b: KilnStakingPositionChange | PlainMessage<KilnStakingPositionChange> | undefined): boolean {
    return proto3.util.equals(KilnStakingPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.LidoWithdrawalsPositionChange
 */
export class LidoWithdrawalsPositionChange extends Message<LidoWithdrawalsPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string external_position = 5;
   */
  externalPosition = "";

  /**
   * @generated from field: string lido_withdrawals_position_change_type = 6;
   */
  lidoWithdrawalsPositionChangeType = "";

  /**
   * @generated from field: repeated string amounts = 7;
   */
  amounts: string[] = [];

  /**
   * @generated from field: repeated string request_ids = 8;
   */
  requestIds: string[] = [];

  constructor(data?: PartialMessage<LidoWithdrawalsPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.LidoWithdrawalsPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "lido_withdrawals_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "amounts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "request_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LidoWithdrawalsPositionChange {
    return new LidoWithdrawalsPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LidoWithdrawalsPositionChange {
    return new LidoWithdrawalsPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LidoWithdrawalsPositionChange {
    return new LidoWithdrawalsPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: LidoWithdrawalsPositionChange | PlainMessage<LidoWithdrawalsPositionChange> | undefined, b: LidoWithdrawalsPositionChange | PlainMessage<LidoWithdrawalsPositionChange> | undefined): boolean {
    return proto3.util.equals(LidoWithdrawalsPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.LiquityDebtPositionChange
 */
export class LiquityDebtPositionChange extends Message<LiquityDebtPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string external_position = 5;
   */
  externalPosition = "";

  /**
   * @generated from field: string liquity_debt_position_change_type = 6;
   */
  liquityDebtPositionChangeType = "";

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount incoming_asset_amounts = 7;
   */
  incomingAssetAmounts: AssetAmount[] = [];

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount fee_asset_amount = 8;
   */
  feeAssetAmount?: AssetAmount;

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount lusd_gas_compensation_asset_amount = 9;
   */
  lusdGasCompensationAssetAmount?: AssetAmount;

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount outgoing_asset_amount = 10;
   */
  outgoingAssetAmount?: AssetAmount;

  constructor(data?: PartialMessage<LiquityDebtPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.LiquityDebtPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "liquity_debt_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "incoming_asset_amounts", kind: "message", T: AssetAmount, repeated: true },
    { no: 8, name: "fee_asset_amount", kind: "message", T: AssetAmount },
    { no: 9, name: "lusd_gas_compensation_asset_amount", kind: "message", T: AssetAmount },
    { no: 10, name: "outgoing_asset_amount", kind: "message", T: AssetAmount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LiquityDebtPositionChange {
    return new LiquityDebtPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LiquityDebtPositionChange {
    return new LiquityDebtPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LiquityDebtPositionChange {
    return new LiquityDebtPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: LiquityDebtPositionChange | PlainMessage<LiquityDebtPositionChange> | undefined, b: LiquityDebtPositionChange | PlainMessage<LiquityDebtPositionChange> | undefined): boolean {
    return proto3.util.equals(LiquityDebtPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ActivityMaplePool
 */
export class ActivityMaplePool extends Message<ActivityMaplePool> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string liquidity_asset = 2;
   */
  liquidityAsset = "";

  /**
   * @generated from field: string rewards_contract = 3;
   */
  rewardsContract = "";

  constructor(data?: PartialMessage<ActivityMaplePool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ActivityMaplePool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "liquidity_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rewards_contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityMaplePool {
    return new ActivityMaplePool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityMaplePool {
    return new ActivityMaplePool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityMaplePool {
    return new ActivityMaplePool().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityMaplePool | PlainMessage<ActivityMaplePool> | undefined, b: ActivityMaplePool | PlainMessage<ActivityMaplePool> | undefined): boolean {
    return proto3.util.equals(ActivityMaplePool, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.MapleLiquidityPositionChange
 */
export class MapleLiquidityPositionChange extends Message<MapleLiquidityPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string external_position = 5;
   */
  externalPosition = "";

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount asset_amount = 6;
   */
  assetAmount?: AssetAmount;

  /**
   * @generated from field: string maple_asset = 7;
   */
  mapleAsset = "";

  /**
   * @generated from field: string maple_liquidity_position_change_type = 8;
   */
  mapleLiquidityPositionChangeType = "";

  /**
   * @generated from field: enzyme.enzyme.v1.ActivityMaplePool poolV1 = 9;
   */
  poolV1?: ActivityMaplePool;

  /**
   * @generated from field: enzyme.enzyme.v1.ActivityMaplePool poolV2 = 10;
   */
  poolV2?: ActivityMaplePool;

  constructor(data?: PartialMessage<MapleLiquidityPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.MapleLiquidityPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "asset_amount", kind: "message", T: AssetAmount },
    { no: 7, name: "maple_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "maple_liquidity_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "poolV1", kind: "message", T: ActivityMaplePool },
    { no: 10, name: "poolV2", kind: "message", T: ActivityMaplePool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapleLiquidityPositionChange {
    return new MapleLiquidityPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapleLiquidityPositionChange {
    return new MapleLiquidityPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapleLiquidityPositionChange {
    return new MapleLiquidityPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: MapleLiquidityPositionChange | PlainMessage<MapleLiquidityPositionChange> | undefined, b: MapleLiquidityPositionChange | PlainMessage<MapleLiquidityPositionChange> | undefined): boolean {
    return proto3.util.equals(MapleLiquidityPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ActivityPolicy
 */
export class ActivityPolicy extends Message<ActivityPolicy> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string policy = 2;
   */
  policy = "";

  /**
   * @generated from field: string policy_type = 3;
   */
  policyType = "";

  /**
   * @generated from field: bool enabled = 4;
   */
  enabled = false;

  constructor(data?: PartialMessage<ActivityPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ActivityPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "policy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "policy_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivityPolicy {
    return new ActivityPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivityPolicy {
    return new ActivityPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivityPolicy {
    return new ActivityPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: ActivityPolicy | PlainMessage<ActivityPolicy> | undefined, b: ActivityPolicy | PlainMessage<ActivityPolicy> | undefined): boolean {
    return proto3.util.equals(ActivityPolicy, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.PolicyDisabledForVault
 */
export class PolicyDisabledForVault extends Message<PolicyDisabledForVault> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.ActivityPolicy policy = 5;
   */
  policy?: ActivityPolicy;

  constructor(data?: PartialMessage<PolicyDisabledForVault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.PolicyDisabledForVault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "policy", kind: "message", T: ActivityPolicy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyDisabledForVault {
    return new PolicyDisabledForVault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyDisabledForVault {
    return new PolicyDisabledForVault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyDisabledForVault {
    return new PolicyDisabledForVault().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyDisabledForVault | PlainMessage<PolicyDisabledForVault> | undefined, b: PolicyDisabledForVault | PlainMessage<PolicyDisabledForVault> | undefined): boolean {
    return proto3.util.equals(PolicyDisabledForVault, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.PolicyEnabledForVault
 */
export class PolicyEnabledForVault extends Message<PolicyEnabledForVault> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.ActivityPolicy policy = 5;
   */
  policy?: ActivityPolicy;

  constructor(data?: PartialMessage<PolicyEnabledForVault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.PolicyEnabledForVault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "policy", kind: "message", T: ActivityPolicy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyEnabledForVault {
    return new PolicyEnabledForVault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyEnabledForVault {
    return new PolicyEnabledForVault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyEnabledForVault {
    return new PolicyEnabledForVault().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyEnabledForVault | PlainMessage<PolicyEnabledForVault> | undefined, b: PolicyEnabledForVault | PlainMessage<PolicyEnabledForVault> | undefined): boolean {
    return proto3.util.equals(PolicyEnabledForVault, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.PricelessAssetBypass
 */
export class PricelessAssetBypass extends Message<PricelessAssetBypass> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string asset = 5;
   */
  asset = "";

  constructor(data?: PartialMessage<PricelessAssetBypass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.PricelessAssetBypass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PricelessAssetBypass {
    return new PricelessAssetBypass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PricelessAssetBypass {
    return new PricelessAssetBypass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PricelessAssetBypass {
    return new PricelessAssetBypass().fromJsonString(jsonString, options);
  }

  static equals(a: PricelessAssetBypass | PlainMessage<PricelessAssetBypass> | undefined, b: PricelessAssetBypass | PlainMessage<PricelessAssetBypass> | undefined): boolean {
    return proto3.util.equals(PricelessAssetBypass, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.PricelessAssetTimelock
 */
export class PricelessAssetTimelock extends Message<PricelessAssetTimelock> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string asset = 5;
   */
  asset = "";

  constructor(data?: PartialMessage<PricelessAssetTimelock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.PricelessAssetTimelock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PricelessAssetTimelock {
    return new PricelessAssetTimelock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PricelessAssetTimelock {
    return new PricelessAssetTimelock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PricelessAssetTimelock {
    return new PricelessAssetTimelock().fromJsonString(jsonString, options);
  }

  static equals(a: PricelessAssetTimelock | PlainMessage<PricelessAssetTimelock> | undefined, b: PricelessAssetTimelock | PlainMessage<PricelessAssetTimelock> | undefined): boolean {
    return proto3.util.equals(PricelessAssetTimelock, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ProtocolFeeBurned
 */
export class ProtocolFeeBurned extends Message<ProtocolFeeBurned> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string activity_type = 2;
   */
  activityType = "";

  /**
   * @generated from field: string mln_burned = 3;
   */
  mlnBurned = "";

  /**
   * @generated from field: string shares = 4;
   */
  shares = "";

  /**
   * @generated from field: float timestamp = 5;
   */
  timestamp = 0;

  /**
   * @generated from field: string vault = 6;
   */
  vault = "";

  constructor(data?: PartialMessage<ProtocolFeeBurned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ProtocolFeeBurned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mln_burned", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtocolFeeBurned {
    return new ProtocolFeeBurned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtocolFeeBurned {
    return new ProtocolFeeBurned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtocolFeeBurned {
    return new ProtocolFeeBurned().fromJsonString(jsonString, options);
  }

  static equals(a: ProtocolFeeBurned | PlainMessage<ProtocolFeeBurned> | undefined, b: ProtocolFeeBurned | PlainMessage<ProtocolFeeBurned> | undefined): boolean {
    return proto3.util.equals(ProtocolFeeBurned, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.ProtocolFeePaid
 */
export class ProtocolFeePaid extends Message<ProtocolFeePaid> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string activity_type = 2;
   */
  activityType = "";

  /**
   * @generated from field: string shares = 3;
   */
  shares = "";

  /**
   * @generated from field: float timestamp = 4;
   */
  timestamp = 0;

  /**
   * @generated from field: string vault = 5;
   */
  vault = "";

  constructor(data?: PartialMessage<ProtocolFeePaid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.ProtocolFeePaid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtocolFeePaid {
    return new ProtocolFeePaid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtocolFeePaid {
    return new ProtocolFeePaid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtocolFeePaid {
    return new ProtocolFeePaid().fromJsonString(jsonString, options);
  }

  static equals(a: ProtocolFeePaid | PlainMessage<ProtocolFeePaid> | undefined, b: ProtocolFeePaid | PlainMessage<ProtocolFeePaid> | undefined): boolean {
    return proto3.util.equals(ProtocolFeePaid, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.SharesBoughtEvent
 */
export class SharesBoughtEvent extends Message<SharesBoughtEvent> {
  /**
   * @generated from field: string activity_type = 1;
   */
  activityType = "";

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount deposit_asset_amount = 2;
   */
  depositAssetAmount?: AssetAmount;

  /**
   * @generated from field: string shares_issued = 3;
   */
  sharesIssued = "";

  constructor(data?: PartialMessage<SharesBoughtEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.SharesBoughtEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deposit_asset_amount", kind: "message", T: AssetAmount },
    { no: 3, name: "shares_issued", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SharesBoughtEvent {
    return new SharesBoughtEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SharesBoughtEvent {
    return new SharesBoughtEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SharesBoughtEvent {
    return new SharesBoughtEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SharesBoughtEvent | PlainMessage<SharesBoughtEvent> | undefined, b: SharesBoughtEvent | PlainMessage<SharesBoughtEvent> | undefined): boolean {
    return proto3.util.equals(SharesBoughtEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.SharesRedeemedEvent
 */
export class SharesRedeemedEvent extends Message<SharesRedeemedEvent> {
  /**
   * @generated from field: string activity_type = 1;
   */
  activityType = "";

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount payout_asset_amounts = 2;
   */
  payoutAssetAmounts: AssetAmount[] = [];

  constructor(data?: PartialMessage<SharesRedeemedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.SharesRedeemedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payout_asset_amounts", kind: "message", T: AssetAmount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SharesRedeemedEvent {
    return new SharesRedeemedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SharesRedeemedEvent {
    return new SharesRedeemedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SharesRedeemedEvent {
    return new SharesRedeemedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SharesRedeemedEvent | PlainMessage<SharesRedeemedEvent> | undefined, b: SharesRedeemedEvent | PlainMessage<SharesRedeemedEvent> | undefined): boolean {
    return proto3.util.equals(SharesRedeemedEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.SharesTransferEvent
 */
export class SharesTransferEvent extends Message<SharesTransferEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string activity_type = 2;
   */
  activityType = "";

  /**
   * @generated from field: string shares = 3;
   */
  shares = "";

  /**
   * @generated from field: float timestamp = 4;
   */
  timestamp = 0;

  /**
   * @generated from field: string vault = 5;
   */
  vault = "";

  /**
   * @generated from field: string from = 6;
   */
  from = "";

  /**
   * @generated from field: string to = 7;
   */
  to = "";

  constructor(data?: PartialMessage<SharesTransferEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.SharesTransferEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SharesTransferEvent {
    return new SharesTransferEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SharesTransferEvent {
    return new SharesTransferEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SharesTransferEvent {
    return new SharesTransferEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SharesTransferEvent | PlainMessage<SharesTransferEvent> | undefined, b: SharesTransferEvent | PlainMessage<SharesTransferEvent> | undefined): boolean {
    return proto3.util.equals(SharesTransferEvent, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.TheGraphDelegationPositionChange
 */
export class TheGraphDelegationPositionChange extends Message<TheGraphDelegationPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string activity_type = 2;
   */
  activityType = "";

  /**
   * @generated from field: float timestamp = 3;
   */
  timestamp = 0;

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string external_position = 5;
   */
  externalPosition = "";

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount fee_amount = 6;
   */
  feeAmount?: AssetAmount;

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount the_graph_delegation_asset_amount = 7;
   */
  theGraphDelegationAssetAmount?: AssetAmount;

  /**
   * @generated from field: enzyme.enzyme.v1.AssetAmount withdrew_while_undelegating_asset_amount = 8;
   */
  withdrewWhileUndelegatingAssetAmount?: AssetAmount;

  /**
   * @generated from field: string indexer = 9;
   */
  indexer = "";

  /**
   * @generated from field: string new_indexer = 10;
   */
  newIndexer = "";

  /**
   * @generated from field: string the_graph_delegation_position_change_type = 11;
   */
  theGraphDelegationPositionChangeType = "";

  constructor(data?: PartialMessage<TheGraphDelegationPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.TheGraphDelegationPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "fee_amount", kind: "message", T: AssetAmount },
    { no: 7, name: "the_graph_delegation_asset_amount", kind: "message", T: AssetAmount },
    { no: 8, name: "withdrew_while_undelegating_asset_amount", kind: "message", T: AssetAmount },
    { no: 9, name: "indexer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "new_indexer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "the_graph_delegation_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TheGraphDelegationPositionChange {
    return new TheGraphDelegationPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TheGraphDelegationPositionChange {
    return new TheGraphDelegationPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TheGraphDelegationPositionChange {
    return new TheGraphDelegationPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: TheGraphDelegationPositionChange | PlainMessage<TheGraphDelegationPositionChange> | undefined, b: TheGraphDelegationPositionChange | PlainMessage<TheGraphDelegationPositionChange> | undefined): boolean {
    return proto3.util.equals(TheGraphDelegationPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.Trade
 */
export class Trade extends Message<Trade> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string activity_type = 2;
   */
  activityType = "";

  /**
   * @generated from field: float timestamp = 3;
   */
  timestamp = 0;

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string adapter = 5;
   */
  adapter = "";

  /**
   * @generated from field: string trade_type = 6;
   */
  tradeType = "";

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount incoming_asset_amounts = 7;
   */
  incomingAssetAmounts: AssetAmount[] = [];

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount outgoing_asset_amounts = 8;
   */
  outgoingAssetAmounts: AssetAmount[] = [];

  /**
   * @generated from field: repeated string incoming_assets = 9;
   */
  incomingAssets: string[] = [];

  /**
   * @generated from field: repeated string outgoing_assets = 10;
   */
  outgoingAssets: string[] = [];

  constructor(data?: PartialMessage<Trade>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.Trade";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "adapter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "trade_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "incoming_asset_amounts", kind: "message", T: AssetAmount, repeated: true },
    { no: 8, name: "outgoing_asset_amounts", kind: "message", T: AssetAmount, repeated: true },
    { no: 9, name: "incoming_assets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "outgoing_assets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trade {
    return new Trade().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trade {
    return new Trade().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trade {
    return new Trade().fromJsonString(jsonString, options);
  }

  static equals(a: Trade | PlainMessage<Trade> | undefined, b: Trade | PlainMessage<Trade> | undefined): boolean {
    return proto3.util.equals(Trade, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.UniswapV3Nft
 */
export class UniswapV3Nft extends Message<UniswapV3Nft> {
  /**
   * @generated from field: float tick_lower = 1;
   */
  tickLower = 0;

  /**
   * @generated from field: float tick_upper = 2;
   */
  tickUpper = 0;

  /**
   * @generated from field: string fee = 3;
   */
  fee = "";

  /**
   * @generated from field: string pool_address = 4;
   */
  poolAddress = "";

  /**
   * @generated from field: string external_position = 5;
   */
  externalPosition = "";

  /**
   * @generated from field: string tokenURI = 6;
   */
  tokenURI = "";

  /**
   * @generated from field: string liquidity = 7;
   */
  liquidity = "";

  /**
   * @generated from field: string token_0 = 8;
   */
  token0 = "";

  /**
   * @generated from field: string token_1 = 9;
   */
  token1 = "";

  constructor(data?: PartialMessage<UniswapV3Nft>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.UniswapV3Nft";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tick_lower", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "tick_upper", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pool_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tokenURI", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "token_0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "token_1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UniswapV3Nft {
    return new UniswapV3Nft().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UniswapV3Nft {
    return new UniswapV3Nft().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UniswapV3Nft {
    return new UniswapV3Nft().fromJsonString(jsonString, options);
  }

  static equals(a: UniswapV3Nft | PlainMessage<UniswapV3Nft> | undefined, b: UniswapV3Nft | PlainMessage<UniswapV3Nft> | undefined): boolean {
    return proto3.util.equals(UniswapV3Nft, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.UniswapV3LiquidityPositionChange
 */
export class UniswapV3LiquidityPositionChange extends Message<UniswapV3LiquidityPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string activity_type = 2;
   */
  activityType = "";

  /**
   * @generated from field: float timestamp = 3;
   */
  timestamp = 0;

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string external_position = 5;
   */
  externalPosition = "";

  /**
   * @generated from field: repeated enzyme.enzyme.v1.AssetAmount asset_amounts = 6;
   */
  assetAmounts: AssetAmount[] = [];

  /**
   * @generated from field: float current_tick = 7;
   */
  currentTick = 0;

  /**
   * @generated from field: string uniswap_v3_liquidity_position_change_type = 8;
   */
  uniswapV3LiquidityPositionChangeType = "";

  /**
   * @generated from field: string liquidity = 9;
   */
  liquidity = "";

  /**
   * @generated from field: string sqrtPrice = 10;
   */
  sqrtPrice = "";

  /**
   * @generated from field: string poolLiquidity = 11;
   */
  poolLiquidity = "";

  /**
   * @generated from field: enzyme.enzyme.v1.UniswapV3Nft nft = 12;
   */
  nft?: UniswapV3Nft;

  constructor(data?: PartialMessage<UniswapV3LiquidityPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.UniswapV3LiquidityPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "asset_amounts", kind: "message", T: AssetAmount, repeated: true },
    { no: 7, name: "current_tick", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "uniswap_v3_liquidity_position_change_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "sqrtPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "poolLiquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "nft", kind: "message", T: UniswapV3Nft },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UniswapV3LiquidityPositionChange {
    return new UniswapV3LiquidityPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UniswapV3LiquidityPositionChange {
    return new UniswapV3LiquidityPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UniswapV3LiquidityPositionChange {
    return new UniswapV3LiquidityPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: UniswapV3LiquidityPositionChange | PlainMessage<UniswapV3LiquidityPositionChange> | undefined, b: UniswapV3LiquidityPositionChange | PlainMessage<UniswapV3LiquidityPositionChange> | undefined): boolean {
    return proto3.util.equals(UniswapV3LiquidityPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.UnknownExternalPositionChange
 */
export class UnknownExternalPositionChange extends Message<UnknownExternalPositionChange> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string external_position = 4;
   */
  externalPosition = "";

  /**
   * @generated from field: string vault = 5;
   */
  vault = "";

  constructor(data?: PartialMessage<UnknownExternalPositionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.UnknownExternalPositionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "external_position", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnknownExternalPositionChange {
    return new UnknownExternalPositionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnknownExternalPositionChange {
    return new UnknownExternalPositionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnknownExternalPositionChange {
    return new UnknownExternalPositionChange().fromJsonString(jsonString, options);
  }

  static equals(a: UnknownExternalPositionChange | PlainMessage<UnknownExternalPositionChange> | undefined, b: UnknownExternalPositionChange | PlainMessage<UnknownExternalPositionChange> | undefined): boolean {
    return proto3.util.equals(UnknownExternalPositionChange, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultCreated
 */
export class VaultCreated extends Message<VaultCreated> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string creator = 5;
   */
  creator = "";

  /**
   * @generated from field: string owner = 6;
   */
  owner = "";

  constructor(data?: PartialMessage<VaultCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultCreated {
    return new VaultCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultCreated {
    return new VaultCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultCreated {
    return new VaultCreated().fromJsonString(jsonString, options);
  }

  static equals(a: VaultCreated | PlainMessage<VaultCreated> | undefined, b: VaultCreated | PlainMessage<VaultCreated> | undefined): boolean {
    return proto3.util.equals(VaultCreated, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.Migration
 */
export class Migration extends Message<Migration> {
  /**
   * @generated from field: bool cancelled = 1;
   */
  cancelled = false;

  /**
   * @generated from field: float cancelled_timestamp = 2;
   */
  cancelledTimestamp = 0;

  /**
   * @generated from field: bool executed = 3;
   */
  executed = false;

  /**
   * @generated from field: float executed_timestamp = 4;
   */
  executedTimestamp = 0;

  /**
   * @generated from field: float executable_timestamp = 5;
   */
  executableTimestamp = 0;

  /**
   * @generated from field: string next_release = 6;
   */
  nextRelease = "";

  /**
   * @generated from field: string prev_release = 7;
   */
  prevRelease = "";

  constructor(data?: PartialMessage<Migration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.Migration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cancelled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "cancelled_timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "executed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "executed_timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "executable_timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "next_release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "prev_release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Migration {
    return new Migration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJsonString(jsonString, options);
  }

  static equals(a: Migration | PlainMessage<Migration> | undefined, b: Migration | PlainMessage<Migration> | undefined): boolean {
    return proto3.util.equals(Migration, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultMigrationCancelled
 */
export class VaultMigrationCancelled extends Message<VaultMigrationCancelled> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.Migration migration = 5;
   */
  migration?: Migration;

  constructor(data?: PartialMessage<VaultMigrationCancelled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultMigrationCancelled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "migration", kind: "message", T: Migration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultMigrationCancelled {
    return new VaultMigrationCancelled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultMigrationCancelled {
    return new VaultMigrationCancelled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultMigrationCancelled {
    return new VaultMigrationCancelled().fromJsonString(jsonString, options);
  }

  static equals(a: VaultMigrationCancelled | PlainMessage<VaultMigrationCancelled> | undefined, b: VaultMigrationCancelled | PlainMessage<VaultMigrationCancelled> | undefined): boolean {
    return proto3.util.equals(VaultMigrationCancelled, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultMigrationExecuted
 */
export class VaultMigrationExecuted extends Message<VaultMigrationExecuted> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.Migration migration = 5;
   */
  migration?: Migration;

  /**
   * @generated from field: string next_comptroller = 6;
   */
  nextComptroller = "";

  constructor(data?: PartialMessage<VaultMigrationExecuted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultMigrationExecuted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "migration", kind: "message", T: Migration },
    { no: 6, name: "next_comptroller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultMigrationExecuted {
    return new VaultMigrationExecuted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultMigrationExecuted {
    return new VaultMigrationExecuted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultMigrationExecuted {
    return new VaultMigrationExecuted().fromJsonString(jsonString, options);
  }

  static equals(a: VaultMigrationExecuted | PlainMessage<VaultMigrationExecuted> | undefined, b: VaultMigrationExecuted | PlainMessage<VaultMigrationExecuted> | undefined): boolean {
    return proto3.util.equals(VaultMigrationExecuted, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultMigrationSignalled
 */
export class VaultMigrationSignalled extends Message<VaultMigrationSignalled> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.Migration migration = 5;
   */
  migration?: Migration;

  /**
   * @generated from field: string next_comptroller = 6;
   */
  nextComptroller = "";

  constructor(data?: PartialMessage<VaultMigrationSignalled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultMigrationSignalled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "migration", kind: "message", T: Migration },
    { no: 6, name: "next_comptroller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultMigrationSignalled {
    return new VaultMigrationSignalled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultMigrationSignalled {
    return new VaultMigrationSignalled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultMigrationSignalled {
    return new VaultMigrationSignalled().fromJsonString(jsonString, options);
  }

  static equals(a: VaultMigrationSignalled | PlainMessage<VaultMigrationSignalled> | undefined, b: VaultMigrationSignalled | PlainMessage<VaultMigrationSignalled> | undefined): boolean {
    return proto3.util.equals(VaultMigrationSignalled, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultNominatedOwnerRemoved
 */
export class VaultNominatedOwnerRemoved extends Message<VaultNominatedOwnerRemoved> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string nominated_owner = 5;
   */
  nominatedOwner = "";

  constructor(data?: PartialMessage<VaultNominatedOwnerRemoved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultNominatedOwnerRemoved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "nominated_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultNominatedOwnerRemoved {
    return new VaultNominatedOwnerRemoved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultNominatedOwnerRemoved {
    return new VaultNominatedOwnerRemoved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultNominatedOwnerRemoved {
    return new VaultNominatedOwnerRemoved().fromJsonString(jsonString, options);
  }

  static equals(a: VaultNominatedOwnerRemoved | PlainMessage<VaultNominatedOwnerRemoved> | undefined, b: VaultNominatedOwnerRemoved | PlainMessage<VaultNominatedOwnerRemoved> | undefined): boolean {
    return proto3.util.equals(VaultNominatedOwnerRemoved, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultNominatedOwnerSet
 */
export class VaultNominatedOwnerSet extends Message<VaultNominatedOwnerSet> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string nominated_owner = 5;
   */
  nominatedOwner = "";

  constructor(data?: PartialMessage<VaultNominatedOwnerSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultNominatedOwnerSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "nominated_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultNominatedOwnerSet {
    return new VaultNominatedOwnerSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultNominatedOwnerSet {
    return new VaultNominatedOwnerSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultNominatedOwnerSet {
    return new VaultNominatedOwnerSet().fromJsonString(jsonString, options);
  }

  static equals(a: VaultNominatedOwnerSet | PlainMessage<VaultNominatedOwnerSet> | undefined, b: VaultNominatedOwnerSet | PlainMessage<VaultNominatedOwnerSet> | undefined): boolean {
    return proto3.util.equals(VaultNominatedOwnerSet, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultOwnershipTransferred
 */
export class VaultOwnershipTransferred extends Message<VaultOwnershipTransferred> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: string next_owner = 5;
   */
  nextOwner = "";

  /**
   * @generated from field: string prev_owner = 6;
   */
  prevOwner = "";

  constructor(data?: PartialMessage<VaultOwnershipTransferred>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultOwnershipTransferred";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "next_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "prev_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultOwnershipTransferred {
    return new VaultOwnershipTransferred().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultOwnershipTransferred {
    return new VaultOwnershipTransferred().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultOwnershipTransferred {
    return new VaultOwnershipTransferred().fromJsonString(jsonString, options);
  }

  static equals(a: VaultOwnershipTransferred | PlainMessage<VaultOwnershipTransferred> | undefined, b: VaultOwnershipTransferred | PlainMessage<VaultOwnershipTransferred> | undefined): boolean {
    return proto3.util.equals(VaultOwnershipTransferred, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.Reconfiguration
 */
export class Reconfiguration extends Message<Reconfiguration> {
  /**
   * @generated from field: bool cancelled = 1;
   */
  cancelled = false;

  /**
   * @generated from field: float cancelled_timestamp = 2;
   */
  cancelledTimestamp = 0;

  /**
   * @generated from field: bool executed = 3;
   */
  executed = false;

  /**
   * @generated from field: float executed_timestamp = 4;
   */
  executedTimestamp = 0;

  /**
   * @generated from field: float executable_timestamp = 5;
   */
  executableTimestamp = 0;

  /**
   * @generated from field: string release = 6;
   */
  release = "";

  constructor(data?: PartialMessage<Reconfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.Reconfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cancelled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "cancelled_timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "executed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "executed_timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "executable_timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "release", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reconfiguration {
    return new Reconfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reconfiguration {
    return new Reconfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reconfiguration {
    return new Reconfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: Reconfiguration | PlainMessage<Reconfiguration> | undefined, b: Reconfiguration | PlainMessage<Reconfiguration> | undefined): boolean {
    return proto3.util.equals(Reconfiguration, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultReconfigurationCancelled
 */
export class VaultReconfigurationCancelled extends Message<VaultReconfigurationCancelled> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.Reconfiguration reconfiguration = 5;
   */
  reconfiguration?: Reconfiguration;

  constructor(data?: PartialMessage<VaultReconfigurationCancelled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultReconfigurationCancelled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "reconfiguration", kind: "message", T: Reconfiguration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultReconfigurationCancelled {
    return new VaultReconfigurationCancelled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultReconfigurationCancelled {
    return new VaultReconfigurationCancelled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultReconfigurationCancelled {
    return new VaultReconfigurationCancelled().fromJsonString(jsonString, options);
  }

  static equals(a: VaultReconfigurationCancelled | PlainMessage<VaultReconfigurationCancelled> | undefined, b: VaultReconfigurationCancelled | PlainMessage<VaultReconfigurationCancelled> | undefined): boolean {
    return proto3.util.equals(VaultReconfigurationCancelled, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultReconfigurationExecuted
 */
export class VaultReconfigurationExecuted extends Message<VaultReconfigurationExecuted> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.Reconfiguration reconfiguration = 5;
   */
  reconfiguration?: Reconfiguration;

  /**
   * @generated from field: string next_comptroller = 6;
   */
  nextComptroller = "";

  constructor(data?: PartialMessage<VaultReconfigurationExecuted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultReconfigurationExecuted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "reconfiguration", kind: "message", T: Reconfiguration },
    { no: 6, name: "next_comptroller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultReconfigurationExecuted {
    return new VaultReconfigurationExecuted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultReconfigurationExecuted {
    return new VaultReconfigurationExecuted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultReconfigurationExecuted {
    return new VaultReconfigurationExecuted().fromJsonString(jsonString, options);
  }

  static equals(a: VaultReconfigurationExecuted | PlainMessage<VaultReconfigurationExecuted> | undefined, b: VaultReconfigurationExecuted | PlainMessage<VaultReconfigurationExecuted> | undefined): boolean {
    return proto3.util.equals(VaultReconfigurationExecuted, a, b);
  }
}

/**
 * @generated from message enzyme.enzyme.v1.VaultReconfigurationSignalled
 */
export class VaultReconfigurationSignalled extends Message<VaultReconfigurationSignalled> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: float timestamp = 2;
   */
  timestamp = 0;

  /**
   * @generated from field: string activity_type = 3;
   */
  activityType = "";

  /**
   * @generated from field: string vault = 4;
   */
  vault = "";

  /**
   * @generated from field: enzyme.enzyme.v1.Reconfiguration reconfiguration = 5;
   */
  reconfiguration?: Reconfiguration;

  /**
   * @generated from field: string next_comptroller = 6;
   */
  nextComptroller = "";

  constructor(data?: PartialMessage<VaultReconfigurationSignalled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enzyme.enzyme.v1.VaultReconfigurationSignalled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "activity_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "vault", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "reconfiguration", kind: "message", T: Reconfiguration },
    { no: 6, name: "next_comptroller", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VaultReconfigurationSignalled {
    return new VaultReconfigurationSignalled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VaultReconfigurationSignalled {
    return new VaultReconfigurationSignalled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VaultReconfigurationSignalled {
    return new VaultReconfigurationSignalled().fromJsonString(jsonString, options);
  }

  static equals(a: VaultReconfigurationSignalled | PlainMessage<VaultReconfigurationSignalled> | undefined, b: VaultReconfigurationSignalled | PlainMessage<VaultReconfigurationSignalled> | undefined): boolean {
    return proto3.util.equals(VaultReconfigurationSignalled, a, b);
  }
}


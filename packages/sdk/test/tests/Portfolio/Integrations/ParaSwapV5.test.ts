import { Portfolio } from "@enzymefinance/sdk";
import { TestActions, TestSetup } from "@enzymefinance/sdk/test";
import { parseEther } from "viem";
import { test } from "vitest";

const environment = TestSetup.mainnet({
  resetHook: "beforeEach",
  forkBlockNumber: 17853512n,
});

// Taken from tx 0x85ecc7c3ea9424f21cd86258e25790316aa8e5dce387a7abcfda5a83ec4c3b47
const takeOrderArgs = Portfolio.Integrations.ParaSwapV5.takeOrderDecode(
  "0x000000000000000000000000000000000000000000000026b38ac9d5404cdf77000000000000000000000000000000000000000000000027179e4a942c434e540000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59900000000000000000000000000000000000000000000000000000000004c4b40ca23b6ec5186493b9b955bef92cdf09200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000200000000000000000000000004d224452801aced8b2f0aebe155379bb5d59438100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee570000000000000000000000000000000000000000000000000000000064d85ad800000000000000000000000000000000000000000000000000000000004c4b40000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000422260fac5e5542a773aa44fbcfedf7c193bc2c5990001f4c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb84d224452801aced8b2f0aebe155379bb5d5943810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
);

const tradedAsset = "0x4d224452801ACEd8B2F0aebE155379bb5D594381" as const; // APE token
const vaultOwner = "0x2a3ef4740654b0a5014f83e142f22740e5af55fd" as const;
const comptrollerProxy = "0xf12c1cd3ae58cb931dd0189ff8299cc8610ca94c" as const;
const vaultProxy = "0xb5b1567089279ff3aca65dcd9d97ada7a91fcc47" as const;

test("takeOrder should work correctly", async () => {
  await environment.anvil.setBalance({
    address: vaultOwner,
    value: parseEther("1"),
  });

  await environment.send({
    account: vaultOwner,
    transaction: Portfolio.Integrations.ParaSwapV5.takeOrder({
      comptrollerProxy,
      integrationManager: environment.constants.integrationManager,
      integrationAdapter: environment.constants.paraswapV5Adapter,
      callArgs: takeOrderArgs,
    }),
  });

  await TestActions.assertBalanceOf({
    environment,
    asset: tradedAsset,
    owner: vaultProxy,
    expected: 721124898584123362900n,
  });
});

test("takeMultipleOrders order should work correctly", async () => {
  await environment.anvil.setBalance({
    address: vaultOwner,
    value: parseEther("1"),
  });

  await environment.send({
    account: vaultOwner,
    transaction: Portfolio.Integrations.ParaSwapV5.takeMultipleOrders({
      comptrollerProxy,
      integrationManager: environment.constants.integrationManager,
      integrationAdapter: environment.constants.paraswapV5Adapter,
      callArgs: {
        allowOrdersToFail: false,
        orders: [takeOrderArgs],
      },
    }),
  });

  await TestActions.assertBalanceOf({
    environment,
    asset: tradedAsset,
    owner: vaultProxy,
    expected: 721124898584123362900n,
  });
});

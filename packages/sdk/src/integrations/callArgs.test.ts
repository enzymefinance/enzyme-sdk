import { test, expect } from "vitest";

import { getAddress, toHex, type Hex } from "viem";
import { decodeCallArgsForIntegration, encodeCallArgsForIntegration } from "./callArgs.js";
import { AAVE_V2_ADAPTER } from "../../tests/constants.js";
import { LEND_SELECTOR } from "../constants/selectors.js";

test("encodeCallArgsForIntegration should encode correctly", () => {
  expect(
    encodeCallArgsForIntegration({
      adapter: AAVE_V2_ADAPTER,
      selector: LEND_SELECTOR,
      integrationData: "0x1230",
    }),
  ).toMatchInlineSnapshot(
    '"0x000000000000000000000000ece6b376af7c9273cebaf6528565c47ea2cb8a4c099f751500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000"',
  );
});

test("decodeCallArgsForIntegration should decode correctly", () => {
  expect(
    decodeCallArgsForIntegration(
      "0x000000000000000000000000ece6b376af7c9273cebaf6528565c47ea2cb8a4c099f751500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000",
    ),
  ).toMatchInlineSnapshot(
    {
      adapter: AAVE_V2_ADAPTER,
      selector: LEND_SELECTOR,
      integrationData: "0x1230",
    },
    `
    {
      "adapter": "0xECe6B376af7C9273cebaf6528565c47Ea2Cb8a4C",
      "integrationData": "0x1230",
      "selector": "0x099f7515",
    }
  `,
  );
});

test("decodeCallArgsForIntegration should be equal to encoded data with encodeCallArgsForIntegration", () => {
  const params = {
    adapter: getAddress(AAVE_V2_ADAPTER),
    selector: LEND_SELECTOR as Hex,
    integrationData: toHex(
      "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fedc73464dfd156d30f6524654a5d56e766da0c3000000000000000000000000faf2c3db614e9d38fe05edc634848be7ff0542b90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000033b2e3cce25d9e52486e3880000000000000000000000000000000000000000000000000000000000000000",
    ),
  };
  const encoded = encodeCallArgsForIntegration(params);
  const decoded = decodeCallArgsForIntegration(encoded);

  expect(decoded).toEqual(params);
});

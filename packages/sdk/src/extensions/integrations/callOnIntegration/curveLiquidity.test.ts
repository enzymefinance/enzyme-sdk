import { CURVE_LIQUIDITY_ADAPTER } from "../../../../tests/constants.js";
import {
  CLAIM_REWARDS_SELECTOR,
  LEND_AND_STAKE_SELECTOR,
  LEND_SELECTOR,
  REDEEM_SELECTOR,
  STAKE_SELECTOR,
  UNSTAKE_AND_REDEEM_SELECTOR,
  UNSTAKE_SELECTOR,
} from "../../../constants/selectors.js";
import { decodeCallOnIntegrationArgs, encodeCallOnIntegrationArgs } from "./callOnIntegration.js";
import { type Hex, getAddress, toHex } from "viem";
import { expect, test } from "vitest";

test("encodeCallOnIntegrationArgs for Curve Liquidity lend should encode correctly", () => {
  expect(
    encodeCallOnIntegrationArgs({
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: LEND_SELECTOR,
      integrationData: "0x1230",
    }),
  ).toMatchInlineSnapshot(
    '"0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f633099f751500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000"',
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity lend should decode correctly", () => {
  expect(
    decodeCallOnIntegrationArgs(
      "0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f633099f751500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000",
    ),
  ).toMatchInlineSnapshot(
    {
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: LEND_SELECTOR,
      integrationData: "0x1230",
    },
    `
    {
      "adapter": "0xEa0a896ddE31CFcB53A96ac767119B69D7B4f633",
      "integrationData": "0x1230",
      "selector": "0x099f7515",
    }
  `,
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity lend should be equal to encoded data with encodeCallOnIntegrationArgs", () => {
  const params = {
    adapter: getAddress(CURVE_LIQUIDITY_ADAPTER),
    selector: LEND_SELECTOR as Hex,
    integrationData: toHex(
      "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fedc73464dfd156d30f6524654a5d56e766da0c3000000000000000000000000faf2c3db614e9d38fe05edc634848be7ff0542b90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000033b2e3cce25d9e52486e3880000000000000000000000000000000000000000000000000000000000000000",
    ),
  };
  const encoded = encodeCallOnIntegrationArgs(params);
  const decoded = decodeCallOnIntegrationArgs(encoded);

  expect(decoded).toEqual(params);
});

test("encodeCallOnIntegrationArgs for Curve Liquidity redeem should encode correctly", () => {
  expect(
    encodeCallOnIntegrationArgs({
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: REDEEM_SELECTOR,
      integrationData: "0x1230",
    }),
  ).toMatchInlineSnapshot(
    '"0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f633c29fa9dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000"',
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity redeem should decode correctly", () => {
  expect(
    decodeCallOnIntegrationArgs(
      "0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f633c29fa9dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000",
    ),
  ).toMatchInlineSnapshot(
    {
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: REDEEM_SELECTOR,
      integrationData: "0x1230",
    },
    `
    {
      "adapter": "0xEa0a896ddE31CFcB53A96ac767119B69D7B4f633",
      "integrationData": "0x1230",
      "selector": "0xc29fa9dd",
    }
  `,
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity redeem should be equal to encoded data with encodeCallOnIntegrationArgs", () => {
  const params = {
    adapter: getAddress(CURVE_LIQUIDITY_ADAPTER),
    selector: REDEEM_SELECTOR as Hex,
    integrationData: toHex(
      "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fedc73464dfd156d30f6524654a5d56e766da0c3000000000000000000000000faf2c3db614e9d38fe05edc634848be7ff0542b90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000033b2e3cce25d9e52486e3880000000000000000000000000000000000000000000000000000000000000000",
    ),
  };
  const encoded = encodeCallOnIntegrationArgs(params);
  const decoded = decodeCallOnIntegrationArgs(encoded);

  expect(decoded).toEqual(params);
});

test("encodeCallOnIntegrationArgs for Curve Liquidity claim rewards should encode correctly", () => {
  expect(
    encodeCallOnIntegrationArgs({
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: CLAIM_REWARDS_SELECTOR,
      integrationData: "0x1230",
    }),
  ).toMatchInlineSnapshot(
    '"0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f633b9dfbacc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000"',
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity claim rewards should decode correctly", () => {
  expect(
    decodeCallOnIntegrationArgs(
      "0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f633b9dfbacc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000",
    ),
  ).toMatchInlineSnapshot(
    {
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: CLAIM_REWARDS_SELECTOR,
      integrationData: "0x1230",
    },
    `
    {
      "adapter": "0xEa0a896ddE31CFcB53A96ac767119B69D7B4f633",
      "integrationData": "0x1230",
      "selector": "0xb9dfbacc",
    }
  `,
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity claim rewards should be equal to encoded data with encodeCallOnIntegrationArgs", () => {
  const params = {
    adapter: getAddress(CURVE_LIQUIDITY_ADAPTER),
    selector: CLAIM_REWARDS_SELECTOR as Hex,
    integrationData: toHex(
      "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fedc73464dfd156d30f6524654a5d56e766da0c3000000000000000000000000faf2c3db614e9d38fe05edc634848be7ff0542b90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000033b2e3cce25d9e52486e3880000000000000000000000000000000000000000000000000000000000000000",
    ),
  };
  const encoded = encodeCallOnIntegrationArgs(params);
  const decoded = decodeCallOnIntegrationArgs(encoded);

  expect(decoded).toEqual(params);
});

test("encodeCallOnIntegrationArgs for Curve Liquidity lend and stake should encode correctly", () => {
  expect(
    encodeCallOnIntegrationArgs({
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: LEND_AND_STAKE_SELECTOR,
      integrationData: "0x1230",
    }),
  ).toMatchInlineSnapshot(
    '"0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f63329fa046e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000"',
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity lend and stake should decode correctly", () => {
  expect(
    decodeCallOnIntegrationArgs(
      "0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f63329fa046e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000",
    ),
  ).toMatchInlineSnapshot(
    {
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: LEND_AND_STAKE_SELECTOR,
      integrationData: "0x1230",
    },
    `
    {
      "adapter": "0xEa0a896ddE31CFcB53A96ac767119B69D7B4f633",
      "integrationData": "0x1230",
      "selector": "0x29fa046e",
    }
  `,
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity lend and stake should be equal to encoded data with encodeCallOnIntegrationArgs", () => {
  const params = {
    adapter: getAddress(CURVE_LIQUIDITY_ADAPTER),
    selector: LEND_AND_STAKE_SELECTOR as Hex,
    integrationData: toHex(
      "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fedc73464dfd156d30f6524654a5d56e766da0c3000000000000000000000000faf2c3db614e9d38fe05edc634848be7ff0542b90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000033b2e3cce25d9e52486e3880000000000000000000000000000000000000000000000000000000000000000",
    ),
  };
  const encoded = encodeCallOnIntegrationArgs(params);
  const decoded = decodeCallOnIntegrationArgs(encoded);

  expect(decoded).toEqual(params);
});

test("encodeCallOnIntegrationArgs for Curve Liquidity unstake and redeem should encode correctly", () => {
  expect(
    encodeCallOnIntegrationArgs({
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: UNSTAKE_AND_REDEEM_SELECTOR,
      integrationData: "0x1230",
    }),
  ).toMatchInlineSnapshot(
    '"0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f6338334eb9900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000"',
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity unstake and redeem should decode correctly", () => {
  expect(
    decodeCallOnIntegrationArgs(
      "0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f6338334eb9900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000",
    ),
  ).toMatchInlineSnapshot(
    {
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: UNSTAKE_AND_REDEEM_SELECTOR,
      integrationData: "0x1230",
    },
    `
    {
      "adapter": "0xEa0a896ddE31CFcB53A96ac767119B69D7B4f633",
      "integrationData": "0x1230",
      "selector": "0x8334eb99",
    }
  `,
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity unstake and redeem should be equal to encoded data with encodeCallOnIntegrationArgs", () => {
  const params = {
    adapter: getAddress(CURVE_LIQUIDITY_ADAPTER),
    selector: UNSTAKE_AND_REDEEM_SELECTOR as Hex,
    integrationData: toHex(
      "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fedc73464dfd156d30f6524654a5d56e766da0c3000000000000000000000000faf2c3db614e9d38fe05edc634848be7ff0542b90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000033b2e3cce25d9e52486e3880000000000000000000000000000000000000000000000000000000000000000",
    ),
  };
  const encoded = encodeCallOnIntegrationArgs(params);
  const decoded = decodeCallOnIntegrationArgs(encoded);

  expect(decoded).toEqual(params);
});

test("encodeCallOnIntegrationArgs for Curve Liquidity stake should encode correctly", () => {
  expect(
    encodeCallOnIntegrationArgs({
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: STAKE_SELECTOR,
      integrationData: "0x1230",
    }),
  ).toMatchInlineSnapshot(
    '"0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f633fa7dd04d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000"',
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity stake should decode correctly", () => {
  expect(
    decodeCallOnIntegrationArgs(
      "0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f633fa7dd04d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000",
    ),
  ).toMatchInlineSnapshot(
    {
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: STAKE_SELECTOR,
      integrationData: "0x1230",
    },
    `
    {
      "adapter": "0xEa0a896ddE31CFcB53A96ac767119B69D7B4f633",
      "integrationData": "0x1230",
      "selector": "0xfa7dd04d",
    }
  `,
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity stake should be equal to encoded data with encodeCallOnIntegrationArgs", () => {
  const params = {
    adapter: getAddress(CURVE_LIQUIDITY_ADAPTER),
    selector: STAKE_SELECTOR as Hex,
    integrationData: toHex(
      "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fedc73464dfd156d30f6524654a5d56e766da0c3000000000000000000000000faf2c3db614e9d38fe05edc634848be7ff0542b90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000033b2e3cce25d9e52486e3880000000000000000000000000000000000000000000000000000000000000000",
    ),
  };
  const encoded = encodeCallOnIntegrationArgs(params);
  const decoded = decodeCallOnIntegrationArgs(encoded);

  expect(decoded).toEqual(params);
});

test("encodeCallOnIntegrationArgs for Curve Liquidity unstake should encode correctly", () => {
  expect(
    encodeCallOnIntegrationArgs({
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: UNSTAKE_SELECTOR,
      integrationData: "0x1230",
    }),
  ).toMatchInlineSnapshot(
    '"0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f63368e3067700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000"',
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity unstake should decode correctly", () => {
  expect(
    decodeCallOnIntegrationArgs(
      "0x000000000000000000000000ea0a896dde31cfcb53a96ac767119b69d7b4f63368e3067700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000021230000000000000000000000000000000000000000000000000000000000000",
    ),
  ).toMatchInlineSnapshot(
    {
      adapter: CURVE_LIQUIDITY_ADAPTER,
      selector: UNSTAKE_SELECTOR,
      integrationData: "0x1230",
    },
    `
    {
      "adapter": "0xEa0a896ddE31CFcB53A96ac767119B69D7B4f633",
      "integrationData": "0x1230",
      "selector": "0x68e30677",
    }
  `,
  );
});

test("decodeCallOnIntegrationArgs for Curve Liquidity unstake should be equal to encoded data with encodeCallOnIntegrationArgs", () => {
  const params = {
    adapter: getAddress(CURVE_LIQUIDITY_ADAPTER),
    selector: UNSTAKE_SELECTOR as Hex,
    integrationData: toHex(
      "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fedc73464dfd156d30f6524654a5d56e766da0c3000000000000000000000000faf2c3db614e9d38fe05edc634848be7ff0542b90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000033b2e3cce25d9e52486e3880000000000000000000000000000000000000000000000000000000000000000",
    ),
  };
  const encoded = encodeCallOnIntegrationArgs(params);
  const decoded = decodeCallOnIntegrationArgs(encoded);

  expect(decoded).toEqual(params);
});

import { COMP, INTEGRATION_MANAGER, ZERO_EX_V2_ADAPTER } from "../../../../tests/constants.js";
import { sendTestTransaction, testActions, testClient } from "../../../../tests/globals.js";
import { Integration } from "../integrationTypes.js";
import { prepareUseIntegration } from "../prepareUseIntegration.js";
import { decodeZeroExV2TakeOrderArgs } from "./zeroExV2.js";
import { parseEther } from "viem";

import { test } from "vitest";

test("prepare adapter trade for zeroExV2 take order should work correctly", async () => {
  await testClient.reset({
    blockNumber: 15775257n,
  });

  const comptrollerProxy = "0x746de9838bb3d14f1ac1b78bd855e48201f221a6";
  const vaultOwner = "0x0d947d68f583e8b23ff816df9ff3f23a8cfd7496";
  const vaultProxy = "0x278c647f7cfb9d55580c69d3676938608c945ba8";

  await testClient.setBalance({
    value: parseEther("1"),
    address: vaultOwner,
  });

  // callArgs from tx 0xfadbcc2e13d2ec81516d6d8bbad14949f045c1850490b38e1975726e1e1d791b
  const callArgs = "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000056178a0d5f301baf6cf3e1cd53d9863437345bf9000000000000000000000000ace8e944cda48439e8eeda4027115cfb6d94285400000000000000000000000055662e225a3376759c24331a9aed764f8f0c9fbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a106bc25fd3d8bc0000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000634ea9a401ffffffffffffffffffffffffffffffffffffff0d6ed660634ea8780000002200000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000421cd42cae08b7241a7e35558374bc18553c6d1b3ffb923fa5af3c36442900b991cb63a0df18d4ac770d6bc2670fbbab84def9b9cb36497c23801a27131237e677d203000000000000000000000000000000000000000000000000000000000000";

  const decodedCallArgs = await decodeZeroExV2TakeOrderArgs(callArgs);

  await sendTestTransaction({
    ...prepareUseIntegration({
      integrationManager: INTEGRATION_MANAGER,
      integrationAdapter: ZERO_EX_V2_ADAPTER,
      callArgs: {
        type: Integration.ZeroExV2TakeOrder,
        ...decodedCallArgs
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  await testActions.assertBalanceOf({
    token: COMP,
    account: vaultProxy,
    expected: 1878119527189043388n,
  });
});

import { INTEGRATION_MANAGER, PARASWAP_V5_ADAPTER } from "../../../../tests/constants.js";
import { sendTestTransaction, testActions, testClientMainnet, testClientPolygon } from "../../../../tests/globals.js";
import { Integration } from "../integrationTypes.js";
import { prepareUseIntegration } from "../prepareUseIntegration.js";
import { parseEther } from "viem";

import { decodeCallOnExtensionParams } from "../../callOnExtension.js";
import { decodeCallOnIntegrationArgs } from "../callOnIntegration.js";
import { decodeParaswapV5TakeOrderArgs } from "./paraswapV5.js";
import { test } from "vitest";

test("prepare adapter trade for ParaswapV5 (simpleSwap) take order should work correctly", async () => {
  const vaultOwner = "0x2a3ef4740654b0a5014f83e142f22740e5af55fd" as const;
  const comptrollerProxy = "0xf12c1cd3ae58cb931dd0189ff8299cc8610ca94c" as const;
  const vaultProxy = "0xb5b1567089279ff3aca65dcd9d97ada7a91fcc47" as const;

  await testClientMainnet.reset({
    blockNumber: 17853512n,
  });

  await testClientMainnet.setBalance({ address: vaultOwner, value: parseEther("1") });

  // Taken from tx 0x85ecc7c3ea9424f21cd86258e25790316aa8e5dce387a7abcfda5a83ec4c3b47
  const integrationData =
    "0x000000000000000000000000000000000000000000000026b38ac9d5404cdf77000000000000000000000000000000000000000000000027179e4a942c434e540000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59900000000000000000000000000000000000000000000000000000000004c4b40ca23b6ec5186493b9b955bef92cdf09200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000200000000000000000000000004d224452801aced8b2f0aebe155379bb5d59438100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee570000000000000000000000000000000000000000000000000000000064d85ad800000000000000000000000000000000000000000000000000000000004c4b40000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000422260fac5e5542a773aa44fbcfedf7c193bc2c5990001f4c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb84d224452801aced8b2f0aebe155379bb5d5943810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";

  const decodedIntegrationData = decodeParaswapV5TakeOrderArgs(integrationData);

  console.log(decodedIntegrationData);

  await sendTestTransaction({
    network: "mainnet",
    ...prepareUseIntegration({
      integrationManager: INTEGRATION_MANAGER,
      integrationAdapter: PARASWAP_V5_ADAPTER,
      callArgs: {
        type: Integration.ParaswapV5TakeOrder,
        ...decodedIntegrationData,
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  await testActions.assertBalanceOf({
    token: "0x4d224452801ACEd8B2F0aebE155379bb5D594381", // APE token
    account: vaultProxy,
    expected: 721124898584123362900n,
  });
});

test("prepare adapter trade for ParaswapV5 (multiSwap) take order should work correctly", async () => {
  const vaultOwner = "0x6b9c7bcd87abe75f37393a94036319f99944a915" as const;
  const comptrollerProxy = "0x765b8b8048713c2205506b92fdcd90de0574937e" as const;
  const _vaultProxy = "0x9d7f7cb8534f316ce3f74997128760ed12598301" as const;

  await testClientPolygon.reset({
    blockNumber: 47245014n,
  });

  await testClientMainnet.setBalance({ address: vaultOwner, value: parseEther("1") });

  // Taken from 0xdb772d8eaceb7e8ca230584d8a81ced2aef7b0344ce46a2f760e40b7ab1c0eb6
  const callOnExtensionsParams =
    "0x39bf70d1000000000000000000000000ad31aaeffd50430b80386263aeb477b9e607b0d10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000007a0000000000000000000000000b663c344ce8f66f906dd1bb7f1e269ed352deea903e38a2b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000007200000000000000000000000000000000000000000000000000087d7c3b7878e8300000000000000000000000000000000000000000000000000893708ed19bbea0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000000000000000000000000000de0b6b3a76400006cbec9afd388459cb734c759c192d68c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003000000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e44769f42e1e9592f86b82f206407a8f7c84b4ed000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000f3938337f7294fef84e9b2c6d548a93f956cc281000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000004de4c4e595acdd7d12fec385e5da5d43160e8a0bac0e000000000000000000000000a9f37d84c856fda3812ad0519dad44fa0a3fe2070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e44769f42e1e9592f86b82f206407a8f7c84b4ed00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000006502aeba000000000000000000000000000000000000000000000000000000000000002b7ceb23fd6bc0add59e62ac25578270cff1b9f619002710a9f37d84c856fda3812ad0519dad44fa0a3fe207000000000000000000000000000000000000000000";

  const decodedCallOnExtensionParams = decodeCallOnExtensionParams(callOnExtensionsParams);
  const decodedCallOnIntegrationArgs = decodeCallOnIntegrationArgs(decodedCallOnExtensionParams.callArgs);
  const decodedIntegrationData = decodeParaswapV5TakeOrderArgs(decodedCallOnIntegrationArgs.integrationData);

  await sendTestTransaction({
    network: "polygon",
    ...prepareUseIntegration({
      integrationManager: "0xad31aaeffd50430b80386263aeb477b9e607b0d1",
      integrationAdapter: "0xb663c344ce8f66f906dd1bb7f1e269ed352deea9",
      callArgs: {
        type: Integration.ParaswapV5TakeOrder,
        ...decodedIntegrationData,
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  // await testActions.assertBalanceOf({

  //   token: "0xa9f37d84c856fda3812ad0519dad44fa0a3fe207", // MLN
  //   account: vaultProxy,
  //   expected: 113736106552826945n,
  // });
});

test("prepare adapter trade for ParaswapV5 (megaSwap) take order should work correctly", async () => {
  const vaultOwner = "0x6b9c7bcd87abe75f37393a94036319f99944a915" as const;
  const comptrollerProxy = "0x765b8b8048713c2205506b92fdcd90de0574937e" as const;
  const _vaultProxy = "0x9d7f7cb8534f316ce3f74997128760ed12598301" as const;

  await testClientPolygon.reset({
    blockNumber: 47245014n,
  });

  await testClientMainnet.setBalance({ address: vaultOwner, value: parseEther("1") });

  // Taken from tx 0xdb772d8eaceb7e8ca230584d8a81ced2aef7b0344ce46a2f760e40b7ab1c0eb6
  const callOnExtensionsParams =
    "0x39bf70d1000000000000000000000000ad31aaeffd50430b80386263aeb477b9e607b0d1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000520000000000000000000000000b663c344ce8f66f906dd1bb7f1e269ed352deea903e38a2b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000001b89df5e5895dde00000000000000000000000000000000000000000000000001bd115578a9c8d60000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000000000000000000000000000de0b6b3a7640000a7eb31af21ef418cbe3d13b419031b1300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b33eaad8d922b1083446dc23f610c2567fb5180f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000e44769f42e1e9592f86b82f206407a8f7c84b4ed000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000f3938337f7294fef84e9b2c6d548a93f956cc281000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000004de4c45092e7e73951c6668f6c46acfca9f2b1c69aef";

  const decodedCallOnExtensionParams = decodeCallOnExtensionParams(callOnExtensionsParams);
  const decodedCallOnIntegrationArgs = decodeCallOnIntegrationArgs(decodedCallOnExtensionParams.callArgs);
  const decodedIntegrationData = decodeParaswapV5TakeOrderArgs(decodedCallOnIntegrationArgs.integrationData);

  await sendTestTransaction({
    network: "polygon",
    ...prepareUseIntegration({
      integrationManager: "0xad31aaeffd50430b80386263aeb477b9e607b0d1",
      integrationAdapter: "0xb663c344ce8f66f906dd1bb7f1e269ed352deea9",
      callArgs: {
        type: Integration.ParaswapV5TakeOrder,
        ...decodedIntegrationData,
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  // await testActions.assertBalanceOf({

  //   token: "0xa9f37d84c856fda3812ad0519dad44fa0a3fe207", // MLN
  //   account: vaultProxy,
  //   expected: 113736106552826945n,
  // });
});

test("prepare adapter trade for ParaswapV5 takes multiple order should work correctly", async () => {
  const vaultOwner = "0x2a3ef4740654b0a5014f83e142f22740e5af55fd" as const;
  const comptrollerProxy = "0xf12c1cd3ae58cb931dd0189ff8299cc8610ca94c" as const;
  const vaultProxy = "0xb5b1567089279ff3aca65dcd9d97ada7a91fcc47" as const;

  await testClientMainnet.reset({
    blockNumber: 17853512n,
  });

  await testClientMainnet.setBalance({ address: vaultOwner, value: parseEther("1") });

  // Taken from tx 0x85ecc7c3ea9424f21cd86258e25790316aa8e5dce387a7abcfda5a83ec4c3b47
  const integrationData =
    "0x000000000000000000000000000000000000000000000026b38ac9d5404cdf77000000000000000000000000000000000000000000000027179e4a942c434e540000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59900000000000000000000000000000000000000000000000000000000004c4b40ca23b6ec5186493b9b955bef92cdf09200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000000200000000000000000000000004d224452801aced8b2f0aebe155379bb5d59438100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000144c04b8d59000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee570000000000000000000000000000000000000000000000000000000064d85ad800000000000000000000000000000000000000000000000000000000004c4b40000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000422260fac5e5542a773aa44fbcfedf7c193bc2c5990001f4c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb84d224452801aced8b2f0aebe155379bb5d5943810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";

  const decodedIntegrationData = decodeParaswapV5TakeOrderArgs(integrationData);

  await sendTestTransaction({
    network: "mainnet",
    ...prepareUseIntegration({
      integrationManager: INTEGRATION_MANAGER,
      integrationAdapter: PARASWAP_V5_ADAPTER,
      callArgs: {
        type: Integration.ParaswapV5TakeMultipleOrders,
        orders: [decodedIntegrationData],
        allowOrdersToFail: false,
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  await testActions.assertBalanceOf({
    token: "0x4d224452801ACEd8B2F0aebE155379bb5D594381", // APE token
    account: vaultProxy,
    expected: 721124898584123362900n,
  });
});

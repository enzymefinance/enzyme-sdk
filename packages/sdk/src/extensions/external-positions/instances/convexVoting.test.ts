import { CVX, EXTERNAL_POSITION_MANAGER, VOTE_LOCKED_CVX } from "../../../../tests/constants.js";
import { publicClientMainnet, sendTestTransaction, testActions, testClientMainnet } from "../../../../tests/globals.js";
import { ExternalPosition } from "../externalPositionTypes.js";
import { prepareUseExternalPosition } from "../prepareUseExternalPosition.js";
import {
  decodeConvexVotingClaimRewardsArgs,
  decodeConvexVotingDelegateArgs,
  decodeConvexVotingLockArgs,
  decodeConvexVotingRelockArgs,
  decodeConvexVotingWithdrawArgs,
} from "./convexVoting.js";
import { parseAbi, parseEther, stringToHex } from "viem";
import { expect, test } from "vitest";

const vaultProxy = "0x278C647F7cfb9D55580c69d3676938608C945ba8" as const;
const comptrollerProxy = "0x746de9838BB3D14f1aC1b78Bd855E48201F221a6" as const;
const vaultOwner = "0x0D947D68f583e8B23ff816df9ff3f23a8Cfd7496" as const;

const abiVoteLockedCvx = parseAbi([
  "function lockedBalanceOf(address user) view returns (uint256)",
  "function userLocks(address user, uint256 lockCounter) view returns (uint112 amount, uint112 boosted, uint32 unlockTime)",
] as const);

const abiSnapshotRegistry = parseAbi(["function delegation(address user, bytes32 id) view returns (address)"] as const);

test("prepare external position trade for Convex Voting lock should work correctly", async () => {
  await testClientMainnet.reset({
    blockNumber: 14913398n,
  });

  await testClientMainnet.setBalance({ address: vaultOwner, value: parseEther("1") });

  // Taken from tx 0xaede0fb1423e70b0d7863881757dd7327b59b8526f7a133d7746f3907bffc1ff
  const callArgs =
    "0x00000000000000000000000063784bbce68ca50118cd6e2b519a22d4d956476600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000000000000000000";

  const decodedCallArgs = decodeConvexVotingLockArgs(callArgs);

  await sendTestTransaction({
    clientNetwork: "mainnet",
    ...prepareUseExternalPosition({
      externalPositionManager: EXTERNAL_POSITION_MANAGER,
      callArgs: {
        type: ExternalPosition.ConvexVotingLock,
        ...decodedCallArgs,
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  const lockedCvx = await publicClientMainnet.readContract({
    abi: abiVoteLockedCvx,
    address: VOTE_LOCKED_CVX,
    functionName: "lockedBalanceOf",
    args: [decodedCallArgs.externalPositionProxy],
  });

  expect(lockedCvx).toBe(1000000000000000000n);
});

test("prepare external position trade for Convex Voting relock should work correctly", async () => {
  await testClientMainnet.reset({
    blockNumber: 15581112n,
  });

  await testClientMainnet.setBalance({ address: vaultOwner, value: parseEther("1") });

  // Taken from tx 0x42baaab2485d48915ef01bf1e65952c96c9884892b83a882ee5a5638d7b1bc3a
  const callArgs =
    "0x00000000000000000000000063784bbce68ca50118cd6e2b519a22d4d9564766000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000";

  const decodedCallArgs = decodeConvexVotingRelockArgs(callArgs);

  await sendTestTransaction({
    clientNetwork: "mainnet",
    ...prepareUseExternalPosition({
      externalPositionManager: EXTERNAL_POSITION_MANAGER,
      callArgs: {
        type: ExternalPosition.ConvexVotingRelock,
        ...decodedCallArgs,
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  // would revert if lock wouldn't exist
  const lockedNumber3 = await publicClientMainnet.readContract({
    abi: abiVoteLockedCvx,
    address: VOTE_LOCKED_CVX,
    functionName: "userLocks",
    args: [decodedCallArgs.externalPositionProxy, 2n],
  });

  expect(lockedNumber3).toBeTruthy();
});

test("prepare external position trade for Convex Voting withdraw should work correctly", async () => {
  await testClientMainnet.reset({
    blockNumber: 15639281n,
  });

  await testClientMainnet.setBalance({ address: vaultOwner, value: parseEther("1") });

  // Taken from tx 0x8049d7d7a922f6cc74c69017d893d2993e874c324dd96808641573e855776938
  const callArgs =
    "0x00000000000000000000000063784bbce68ca50118cd6e2b519a22d4d9564766000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000";

  const decodedCallArgs = decodeConvexVotingWithdrawArgs(callArgs);

  await sendTestTransaction({
    clientNetwork: "mainnet",
    ...prepareUseExternalPosition({
      externalPositionManager: EXTERNAL_POSITION_MANAGER,
      callArgs: {
        type: ExternalPosition.ConvexVotingWithdraw,
        ...decodedCallArgs,
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  const lockedCvx = await publicClientMainnet.readContract({
    abi: abiVoteLockedCvx,
    address: VOTE_LOCKED_CVX,
    functionName: "lockedBalanceOf",
    args: [decodedCallArgs.externalPositionProxy],
  });

  expect(lockedCvx).toBe(800000000000000000n);
});

test("prepare external position trade for Convex Voting claim rewards should work correctly", async () => {
  await testClientMainnet.reset({
    blockNumber: 14897331n,
  });

  await testClientMainnet.setBalance({ address: vaultOwner, value: parseEther("1") });

  // Taken from tx 0xc28ce3df19009531f9a769a9b0bc12dc6ada8e43f91af8789bed626a3459392d
  const callArgs =
    "";

  const decodedCallArgs = decodeConvexVotingClaimRewardsArgs(callArgs);

  const cvxBalanceBeforeClaim = await testActions.getBalanceOf({
    token: CVX,
    account: vaultProxy,
  });

  await sendTestTransaction({
    clientNetwork: "mainnet",
    ...prepareUseExternalPosition({
      externalPositionManager: EXTERNAL_POSITION_MANAGER,
      callArgs: {
        type: ExternalPosition.ConvexVotingClaimRewards,
        ...decodedCallArgs,
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  const cvxBalanceAfterClaim = await testActions.getBalanceOf({
    token: CVX,
    account: vaultProxy,
  });

  expect(cvxBalanceAfterClaim).toBeGreaterThan(cvxBalanceBeforeClaim);
});

test("prepare external position trade for Convex Voting delegate should work correctly", async () => {
  await testClientMainnet.reset({
    blockNumber: 14840493n,
  });

  await testClientMainnet.setBalance({ address: vaultOwner, value: parseEther("1") });

  // Taken from tx 0x7d259fc02d6708522061c707254deecbfd08c9268aefeb9a7cf83b9ebbc8f5af
  const callArgs =
    "0x00000000000000000000000063784bbce68ca50118cd6e2b519a22d4d9564766000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000de1e6a7ed0ad3f61d531a8a78e83ccddbd6e0c49";

  const decodedCallArgs = decodeConvexVotingDelegateArgs(callArgs);

  await sendTestTransaction({
    clientNetwork: "mainnet",
    ...prepareUseExternalPosition({
      externalPositionManager: EXTERNAL_POSITION_MANAGER,
      callArgs: {
        type: ExternalPosition.ConvexVotingDelegate,
        ...decodedCallArgs,
      },
    }),
    account: vaultOwner,
    address: comptrollerProxy,
  });

  const snapshotDelegateRegistry = "0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446";

  const delegate = await publicClientMainnet.readContract({
    abi: abiSnapshotRegistry,
    address: snapshotDelegateRegistry,
    functionName: "delegation",
    args: [decodedCallArgs.externalPositionProxy, stringToHex("cvx.eth", { size: 32 })],
  });

  expect(delegate).toBe(decodedCallArgs.delegate);
});
